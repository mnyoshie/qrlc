/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: qrl.proto */

#ifndef PROTOBUF_C_qrl_2eproto__INCLUDED
#define PROTOBUF_C_qrl_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

//#include "google/api/annotations.pb-c.h"

typedef struct Qrl__Empty Qrl__Empty;
typedef struct Qrl__GetNodeStateReq Qrl__GetNodeStateReq;
typedef struct Qrl__GetNodeStateResp Qrl__GetNodeStateResp;
typedef struct Qrl__GetKnownPeersReq Qrl__GetKnownPeersReq;
typedef struct Qrl__GetKnownPeersResp Qrl__GetKnownPeersResp;
typedef struct Qrl__GetPeersStatReq Qrl__GetPeersStatReq;
typedef struct Qrl__GetPeersStatResp Qrl__GetPeersStatResp;
typedef struct Qrl__GetChainStatsReq Qrl__GetChainStatsReq;
typedef struct Qrl__GetChainStatsResp Qrl__GetChainStatsResp;
typedef struct Qrl__GetStatsReq Qrl__GetStatsReq;
typedef struct Qrl__GetStatsResp Qrl__GetStatsResp;
typedef struct Qrl__GetAddressFromPKReq Qrl__GetAddressFromPKReq;
typedef struct Qrl__GetAddressFromPKResp Qrl__GetAddressFromPKResp;
typedef struct Qrl__BlockDataPoint Qrl__BlockDataPoint;
typedef struct Qrl__GetAddressStateReq Qrl__GetAddressStateReq;
typedef struct Qrl__GetAddressStateResp Qrl__GetAddressStateResp;
typedef struct Qrl__GetOptimizedAddressStateResp Qrl__GetOptimizedAddressStateResp;
typedef struct Qrl__GetMultiSigAddressStateReq Qrl__GetMultiSigAddressStateReq;
typedef struct Qrl__GetMultiSigAddressStateResp Qrl__GetMultiSigAddressStateResp;
typedef struct Qrl__IsSlaveReq Qrl__IsSlaveReq;
typedef struct Qrl__IsSlaveResp Qrl__IsSlaveResp;
typedef struct Qrl__ParseAddressReq Qrl__ParseAddressReq;
typedef struct Qrl__ParseAddressResp Qrl__ParseAddressResp;
typedef struct Qrl__GetObjectReq Qrl__GetObjectReq;
typedef struct Qrl__GetObjectResp Qrl__GetObjectResp;
typedef struct Qrl__GetLatestDataReq Qrl__GetLatestDataReq;
typedef struct Qrl__GetLatestDataResp Qrl__GetLatestDataResp;
typedef struct Qrl__TransferCoinsReq Qrl__TransferCoinsReq;
typedef struct Qrl__TransferCoinsResp Qrl__TransferCoinsResp;
typedef struct Qrl__PushTransactionReq Qrl__PushTransactionReq;
typedef struct Qrl__PushTransactionResp Qrl__PushTransactionResp;
typedef struct Qrl__MultiSigCreateTxnReq Qrl__MultiSigCreateTxnReq;
typedef struct Qrl__MultiSigSpendTxnReq Qrl__MultiSigSpendTxnReq;
typedef struct Qrl__MultiSigVoteTxnReq Qrl__MultiSigVoteTxnReq;
typedef struct Qrl__MessageTxnReq Qrl__MessageTxnReq;
typedef struct Qrl__TokenTxnReq Qrl__TokenTxnReq;
typedef struct Qrl__TransferTokenTxnReq Qrl__TransferTokenTxnReq;
typedef struct Qrl__SlaveTxnReq Qrl__SlaveTxnReq;
typedef struct Qrl__LatticeTxnReq Qrl__LatticeTxnReq;
typedef struct Qrl__MiniTransaction Qrl__MiniTransaction;
typedef struct Qrl__GetTransactionReq Qrl__GetTransactionReq;
typedef struct Qrl__GetTransactionResp Qrl__GetTransactionResp;
typedef struct Qrl__GetMiniTransactionsByAddressReq Qrl__GetMiniTransactionsByAddressReq;
typedef struct Qrl__GetMiniTransactionsByAddressResp Qrl__GetMiniTransactionsByAddressResp;
typedef struct Qrl__GetTransactionsByAddressReq Qrl__GetTransactionsByAddressReq;
typedef struct Qrl__GetTransactionsByAddressResp Qrl__GetTransactionsByAddressResp;
typedef struct Qrl__GetMultiSigSpendTxsByAddressReq Qrl__GetMultiSigSpendTxsByAddressReq;
typedef struct Qrl__GetMultiSigSpendTxsByAddressResp Qrl__GetMultiSigSpendTxsByAddressResp;
typedef struct Qrl__GetVoteStatsReq Qrl__GetVoteStatsReq;
typedef struct Qrl__GetVoteStatsResp Qrl__GetVoteStatsResp;
typedef struct Qrl__GetInboxMessagesByAddressResp Qrl__GetInboxMessagesByAddressResp;
typedef struct Qrl__InboxMessage Qrl__InboxMessage;
typedef struct Qrl__TokenDetail Qrl__TokenDetail;
typedef struct Qrl__GetTokensByAddressResp Qrl__GetTokensByAddressResp;
typedef struct Qrl__SlaveDetail Qrl__SlaveDetail;
typedef struct Qrl__GetSlavesByAddressResp Qrl__GetSlavesByAddressResp;
typedef struct Qrl__LatticePKsDetail Qrl__LatticePKsDetail;
typedef struct Qrl__GetLatticePKsByAddressResp Qrl__GetLatticePKsByAddressResp;
typedef struct Qrl__MultiSigDetail Qrl__MultiSigDetail;
typedef struct Qrl__GetMultiSigAddressesByAddressResp Qrl__GetMultiSigAddressesByAddressResp;
typedef struct Qrl__GetBalanceReq Qrl__GetBalanceReq;
typedef struct Qrl__GetBalanceResp Qrl__GetBalanceResp;
typedef struct Qrl__GetTotalBalanceReq Qrl__GetTotalBalanceReq;
typedef struct Qrl__GetTotalBalanceResp Qrl__GetTotalBalanceResp;
typedef struct Qrl__GetOTSReq Qrl__GetOTSReq;
typedef struct Qrl__OTSBitfieldByPage Qrl__OTSBitfieldByPage;
typedef struct Qrl__GetOTSResp Qrl__GetOTSResp;
typedef struct Qrl__GetHeightReq Qrl__GetHeightReq;
typedef struct Qrl__GetHeightResp Qrl__GetHeightResp;
typedef struct Qrl__GetBlockReq Qrl__GetBlockReq;
typedef struct Qrl__GetBlockResp Qrl__GetBlockResp;
typedef struct Qrl__GetBlockByNumberReq Qrl__GetBlockByNumberReq;
typedef struct Qrl__GetBlockByNumberResp Qrl__GetBlockByNumberResp;
typedef struct Qrl__GetLocalAddressesReq Qrl__GetLocalAddressesReq;
typedef struct Qrl__GetLocalAddressesResp Qrl__GetLocalAddressesResp;
typedef struct Qrl__NodeInfo Qrl__NodeInfo;
typedef struct Qrl__AddressDescriptor Qrl__AddressDescriptor;
typedef struct Qrl__StoredPeers Qrl__StoredPeers;
typedef struct Qrl__Peer Qrl__Peer;
typedef struct Qrl__AddressState Qrl__AddressState;
typedef struct Qrl__AddressState__TokensEntry Qrl__AddressState__TokensEntry;
typedef struct Qrl__AddressState__SlavePksAccessTypeEntry Qrl__AddressState__SlavePksAccessTypeEntry;
typedef struct Qrl__OptimizedAddressState Qrl__OptimizedAddressState;
typedef struct Qrl__MultiSigAddressState Qrl__MultiSigAddressState;
typedef struct Qrl__MultiSigAddressesList Qrl__MultiSigAddressesList;
typedef struct Qrl__DataList Qrl__DataList;
typedef struct Qrl__Bitfield Qrl__Bitfield;
typedef struct Qrl__TransactionHashList Qrl__TransactionHashList;
typedef struct Qrl__LatticePK Qrl__LatticePK;
typedef struct Qrl__AddressAmount Qrl__AddressAmount;
typedef struct Qrl__BlockHeader Qrl__BlockHeader;
typedef struct Qrl__BlockHeaderExtended Qrl__BlockHeaderExtended;
typedef struct Qrl__TransactionCount Qrl__TransactionCount;
typedef struct Qrl__TransactionCount__CountEntry Qrl__TransactionCount__CountEntry;
typedef struct Qrl__TransactionExtended Qrl__TransactionExtended;
typedef struct Qrl__BlockExtended Qrl__BlockExtended;
typedef struct Qrl__Block Qrl__Block;
typedef struct Qrl__GenesisBalance Qrl__GenesisBalance;
typedef struct Qrl__BlockMetaDataList Qrl__BlockMetaDataList;
typedef struct Qrl__Transaction Qrl__Transaction;
typedef struct Qrl__Transaction__Transfer Qrl__Transaction__Transfer;
typedef struct Qrl__Transaction__CoinBase Qrl__Transaction__CoinBase;
typedef struct Qrl__Transaction__LatticePublicKey Qrl__Transaction__LatticePublicKey;
typedef struct Qrl__Transaction__Message Qrl__Transaction__Message;
typedef struct Qrl__Transaction__Token Qrl__Transaction__Token;
typedef struct Qrl__Transaction__TransferToken Qrl__Transaction__TransferToken;
typedef struct Qrl__Transaction__Slave Qrl__Transaction__Slave;
typedef struct Qrl__Transaction__MultiSigCreate Qrl__Transaction__MultiSigCreate;
typedef struct Qrl__Transaction__MultiSigSpend Qrl__Transaction__MultiSigSpend;
typedef struct Qrl__Transaction__MultiSigVote Qrl__Transaction__MultiSigVote;
typedef struct Qrl__Transaction__ProposalCreate Qrl__Transaction__ProposalCreate;
typedef struct Qrl__Transaction__ProposalCreate__QIP Qrl__Transaction__ProposalCreate__QIP;
typedef struct Qrl__Transaction__ProposalCreate__Config Qrl__Transaction__ProposalCreate__Config;
typedef struct Qrl__Transaction__ProposalCreate__Other Qrl__Transaction__ProposalCreate__Other;
typedef struct Qrl__Transaction__ProposalVote Qrl__Transaction__ProposalVote;
typedef struct Qrl__VoteStats Qrl__VoteStats;
typedef struct Qrl__ProposalVoteStats Qrl__ProposalVoteStats;
typedef struct Qrl__ProposalRecord Qrl__ProposalRecord;
typedef struct Qrl__TokenList Qrl__TokenList;
typedef struct Qrl__TokenBalance Qrl__TokenBalance;
typedef struct Qrl__SlaveMetadata Qrl__SlaveMetadata;
typedef struct Qrl__LatticePKMetadata Qrl__LatticePKMetadata;
typedef struct Qrl__TokenMetadata Qrl__TokenMetadata;
typedef struct Qrl__EncryptedEphemeralMessage Qrl__EncryptedEphemeralMessage;
typedef struct Qrl__EncryptedEphemeralMessage__Channel Qrl__EncryptedEphemeralMessage__Channel;
typedef struct Qrl__AddressList Qrl__AddressList;
typedef struct Qrl__BlockHeightData Qrl__BlockHeightData;
typedef struct Qrl__BlockMetaData Qrl__BlockMetaData;
typedef struct Qrl__BlockNumberMapping Qrl__BlockNumberMapping;
typedef struct Qrl__PeerStat Qrl__PeerStat;
typedef struct Qrl__NodeChainState Qrl__NodeChainState;
typedef struct Qrl__NodeHeaderHash Qrl__NodeHeaderHash;
typedef struct Qrl__P2PAcknowledgement Qrl__P2PAcknowledgement;
typedef struct Qrl__PeerInfo Qrl__PeerInfo;
typedef struct Qrl__Peers Qrl__Peers;
typedef struct Qrl__DevConfig Qrl__DevConfig;
typedef struct Qrl__DevConfig__Chain Qrl__DevConfig__Chain;
typedef struct Qrl__DevConfig__Block Qrl__DevConfig__Block;
typedef struct Qrl__DevConfig__Block__BlockSizeController Qrl__DevConfig__Block__BlockSizeController;
typedef struct Qrl__DevConfig__Transaction Qrl__DevConfig__Transaction;
typedef struct Qrl__DevConfig__Transaction__Message Qrl__DevConfig__Transaction__Message;
typedef struct Qrl__DevConfig__Transaction__Slave Qrl__DevConfig__Transaction__Slave;
typedef struct Qrl__DevConfig__Transaction__Token Qrl__DevConfig__Transaction__Token;
typedef struct Qrl__DevConfig__Transaction__Lattice Qrl__DevConfig__Transaction__Lattice;
typedef struct Qrl__DevConfig__Transaction__FoundationMultiSig Qrl__DevConfig__Transaction__FoundationMultiSig;
typedef struct Qrl__DevConfig__Transaction__Proposal Qrl__DevConfig__Transaction__Proposal;
typedef struct Qrl__DevConfig__POW Qrl__DevConfig__POW;


/* --- enums --- */

typedef enum _Qrl__GetLatestDataReq__Filter {
  QRL__GET_LATEST_DATA_REQ__FILTER__ALL = 0,
  QRL__GET_LATEST_DATA_REQ__FILTER__BLOCKHEADERS = 1,
  QRL__GET_LATEST_DATA_REQ__FILTER__TRANSACTIONS = 2,
  QRL__GET_LATEST_DATA_REQ__FILTER__TRANSACTIONS_UNCONFIRMED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(QRL__GET_LATEST_DATA_REQ__FILTER)
} Qrl__GetLatestDataReq__Filter;
typedef enum _Qrl__PushTransactionResp__ResponseCode {
  QRL__PUSH_TRANSACTION_RESP__RESPONSE_CODE__UNKNOWN = 0,
  QRL__PUSH_TRANSACTION_RESP__RESPONSE_CODE__ERROR = 1,
  QRL__PUSH_TRANSACTION_RESP__RESPONSE_CODE__VALIDATION_FAILED = 2,
  QRL__PUSH_TRANSACTION_RESP__RESPONSE_CODE__SUBMITTED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(QRL__PUSH_TRANSACTION_RESP__RESPONSE_CODE)
} Qrl__PushTransactionResp__ResponseCode;
typedef enum _Qrl__GetMultiSigSpendTxsByAddressReq__FilterType {
  QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__FILTER_TYPE__NONE = 0,
  QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__FILTER_TYPE__EXECUTED_ONLY = 1,
  QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__FILTER_TYPE__NON_EXECUTED = 2,
  QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__FILTER_TYPE__EXPIRED = 3,
  QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__FILTER_TYPE__NON_EXPIRED = 4,
  QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__FILTER_TYPE__NON_EXECUTED_EXPIRED = 5,
  QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__FILTER_TYPE__NON_EXECUTED_NON_EXPIRED = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__FILTER_TYPE)
} Qrl__GetMultiSigSpendTxsByAddressReq__FilterType;
typedef enum _Qrl__NodeInfo__State {
  QRL__NODE_INFO__STATE__UNKNOWN = 0,
  QRL__NODE_INFO__STATE__UNSYNCED = 1,
  QRL__NODE_INFO__STATE__SYNCING = 2,
  QRL__NODE_INFO__STATE__SYNCED = 3,
  QRL__NODE_INFO__STATE__FORKED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(QRL__NODE_INFO__STATE)
} Qrl__NodeInfo__State;

/* --- messages --- */

/*
 **
 * Empty message definition
 */
struct  Qrl__Empty
{
  ProtobufCMessage base;
};
#define QRL__EMPTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__empty__descriptor) \
 }


/*
 **
 * Represents a query to get node state
 */
struct  Qrl__GetNodeStateReq
{
  ProtobufCMessage base;
};
#define QRL__GET_NODE_STATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_node_state_req__descriptor) \
 }


/*
 **
 * Represents the reply message to node state query
 */
struct  Qrl__GetNodeStateResp
{
  ProtobufCMessage base;
  Qrl__NodeInfo *info;
};
#define QRL__GET_NODE_STATE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_node_state_resp__descriptor) \
, NULL }


/*
 **
 * Represents a query to get known peers
 */
struct  Qrl__GetKnownPeersReq
{
  ProtobufCMessage base;
};
#define QRL__GET_KNOWN_PEERS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_known_peers_req__descriptor) \
 }


/*
 **
 * Represents the reply message to known peers query
 */
struct  Qrl__GetKnownPeersResp
{
  ProtobufCMessage base;
  /*
   * NodeInfo object containing node state information
   */
  Qrl__NodeInfo *node_info;
  /*
   * List of Peer objects containing peer nodes detailed information
   */
  size_t n_known_peers;
  Qrl__Peer **known_peers;
};
#define QRL__GET_KNOWN_PEERS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_known_peers_resp__descriptor) \
, NULL, 0,NULL }


/*
 **
 * Represents a query to get connected peers stat
 */
struct  Qrl__GetPeersStatReq
{
  ProtobufCMessage base;
};
#define QRL__GET_PEERS_STAT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_peers_stat_req__descriptor) \
 }


/*
 **
 * Represents the reply message to peers stat query
 */
struct  Qrl__GetPeersStatResp
{
  ProtobufCMessage base;
  /*
   * PeerState object contains peer_ip, port and peer state information
   */
  size_t n_peers_stat;
  Qrl__PeerStat **peers_stat;
};
#define QRL__GET_PEERS_STAT_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_peers_stat_resp__descriptor) \
, 0,NULL }


struct  Qrl__GetChainStatsReq
{
  ProtobufCMessage base;
};
#define QRL__GET_CHAIN_STATS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_chain_stats_req__descriptor) \
 }


struct  Qrl__GetChainStatsResp
{
  ProtobufCMessage base;
  /*
   * whole state folder size in bytes
   */
  uint64_t state_size;
  /*
   * megabytes
   */
  char *state_size_mb;
  /*
   * gigabytes
   */
  char *state_size_gb;
};
#define QRL__GET_CHAIN_STATS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_chain_stats_resp__descriptor) \
, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 **
 * Represents a query to get statistics about node
 */
struct  Qrl__GetStatsReq
{
  ProtobufCMessage base;
  /*
   * Boolean to define if block timeseries should be included in reply or not
   */
  protobuf_c_boolean include_timeseries;
};
#define QRL__GET_STATS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_stats_req__descriptor) \
, 0 }


/*
 **
 * Represents the reply message to get statistics about node
 */
struct  Qrl__GetStatsResp
{
  ProtobufCMessage base;
  /*
   * NodeInfo object containing node state information
   */
  Qrl__NodeInfo *node_info;
  /*
   * Current epoch
   */
  uint64_t epoch;
  /*
   * Indicates uptime in seconds
   */
  uint64_t uptime_network;
  /*
   * Block reward
   */
  uint64_t block_last_reward;
  /*
   * Blocktime average
   */
  uint64_t block_time_mean;
  /*
   * Blocktime standrad deviation
   */
  uint64_t block_time_sd;
  /*
   * Total coins supply
   */
  uint64_t coins_total_supply;
  /*
   * Total coins emitted
   */
  uint64_t coins_emitted;
  size_t n_block_timeseries;
  Qrl__BlockDataPoint **block_timeseries;
};
#define QRL__GET_STATS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_stats_resp__descriptor) \
, NULL, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


struct  Qrl__GetAddressFromPKReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData pk;
};
#define QRL__GET_ADDRESS_FROM_PKREQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_address_from_pkreq__descriptor) \
, {0,NULL} }


struct  Qrl__GetAddressFromPKResp
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
};
#define QRL__GET_ADDRESS_FROM_PKRESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_address_from_pkresp__descriptor) \
, {0,NULL} }


/*
 **
 * BlockDataPoint message definition
 */
struct  Qrl__BlockDataPoint
{
  ProtobufCMessage base;
  /*
   * Block number
   */
  uint64_t number;
  /*
   * Block difficulty
   */
  char *difficulty;
  /*
   * Block timestamp
   */
  uint64_t timestamp;
  uint64_t time_last;
  uint64_t time_movavg;
  /*
   * Hash power
   */
  float hash_power;
  /*
   * Block header hash
   */
  ProtobufCBinaryData header_hash;
  /*
   * Previous block's header hash
   */
  ProtobufCBinaryData header_hash_prev;
};
#define QRL__BLOCK_DATA_POINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__block_data_point__descriptor) \
, 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0, {0,NULL}, {0,NULL} }


struct  Qrl__GetAddressStateReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  protobuf_c_boolean exclude_ots_bitfield;
  protobuf_c_boolean exclude_transaction_hashes;
};
#define QRL__GET_ADDRESS_STATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_address_state_req__descriptor) \
, {0,NULL}, 0, 0 }


struct  Qrl__GetAddressStateResp
{
  ProtobufCMessage base;
  Qrl__AddressState *state;
};
#define QRL__GET_ADDRESS_STATE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_address_state_resp__descriptor) \
, NULL }


struct  Qrl__GetOptimizedAddressStateResp
{
  ProtobufCMessage base;
  Qrl__OptimizedAddressState *state;
};
#define QRL__GET_OPTIMIZED_ADDRESS_STATE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_optimized_address_state_resp__descriptor) \
, NULL }


struct  Qrl__GetMultiSigAddressStateReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
};
#define QRL__GET_MULTI_SIG_ADDRESS_STATE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_multi_sig_address_state_req__descriptor) \
, {0,NULL} }


struct  Qrl__GetMultiSigAddressStateResp
{
  ProtobufCMessage base;
  Qrl__MultiSigAddressState *state;
};
#define QRL__GET_MULTI_SIG_ADDRESS_STATE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_multi_sig_address_state_resp__descriptor) \
, NULL }


struct  Qrl__IsSlaveReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_address;
  ProtobufCBinaryData slave_pk;
};
#define QRL__IS_SLAVE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__is_slave_req__descriptor) \
, {0,NULL}, {0,NULL} }


struct  Qrl__IsSlaveResp
{
  ProtobufCMessage base;
  protobuf_c_boolean result;
};
#define QRL__IS_SLAVE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__is_slave_resp__descriptor) \
, 0 }


struct  Qrl__ParseAddressReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
};
#define QRL__PARSE_ADDRESS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__parse_address_req__descriptor) \
, {0,NULL} }


struct  Qrl__ParseAddressResp
{
  ProtobufCMessage base;
  protobuf_c_boolean is_valid;
  Qrl__AddressDescriptor *desc;
};
#define QRL__PARSE_ADDRESS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__parse_address_resp__descriptor) \
, 0, NULL }


struct  Qrl__GetObjectReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData query;
};
#define QRL__GET_OBJECT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_object_req__descriptor) \
, {0,NULL} }


typedef enum {
  QRL__GET_OBJECT_RESP__RESULT__NOT_SET = 0,
  QRL__GET_OBJECT_RESP__RESULT_ADDRESS_STATE = 2,
  QRL__GET_OBJECT_RESP__RESULT_TRANSACTION = 3,
  QRL__GET_OBJECT_RESP__RESULT_BLOCK_EXTENDED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(QRL__GET_OBJECT_RESP__RESULT__CASE)
} Qrl__GetObjectResp__ResultCase;

struct  Qrl__GetObjectResp
{
  ProtobufCMessage base;
  protobuf_c_boolean found;
  Qrl__GetObjectResp__ResultCase result_case;
  union {
    Qrl__OptimizedAddressState *address_state;
    Qrl__TransactionExtended *transaction;
    Qrl__BlockExtended *block_extended;
  };
};
#define QRL__GET_OBJECT_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_object_resp__descriptor) \
, 0, QRL__GET_OBJECT_RESP__RESULT__NOT_SET, {0} }


struct  Qrl__GetLatestDataReq
{
  ProtobufCMessage base;
  Qrl__GetLatestDataReq__Filter filter;
  /*
   * Offset in the result list (works backwards in this case)
   */
  uint32_t offset;
  /*
   * Number of items to retrive. Capped at 100
   */
  uint32_t quantity;
};
#define QRL__GET_LATEST_DATA_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_latest_data_req__descriptor) \
, QRL__GET_LATEST_DATA_REQ__FILTER__ALL, 0, 0 }


struct  Qrl__GetLatestDataResp
{
  ProtobufCMessage base;
  size_t n_blockheaders;
  Qrl__BlockHeaderExtended **blockheaders;
  size_t n_transactions;
  Qrl__TransactionExtended **transactions;
  size_t n_transactions_unconfirmed;
  Qrl__TransactionExtended **transactions_unconfirmed;
};
#define QRL__GET_LATEST_DATA_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_latest_data_resp__descriptor) \
, 0,NULL, 0,NULL, 0,NULL }


struct  Qrl__TransferCoinsReq
{
  ProtobufCMessage base;
  /*
   * Transaction source address
   */
  ProtobufCBinaryData master_addr;
  /*
   * Transaction destination address
   */
  size_t n_addresses_to;
  ProtobufCBinaryData *addresses_to;
  /*
   * Amount. It should be expressed in Shor
   */
  size_t n_amounts;
  uint64_t *amounts;
  /*
   * Message Data. Optional field to send messages
   */
  ProtobufCBinaryData message_data;
  /*
   * Fee. It should be expressed in Shor
   */
  uint64_t fee;
  /*
   * XMSS Public key
   */
  ProtobufCBinaryData xmss_pk;
};
#define QRL__TRANSFER_COINS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transfer_coins_req__descriptor) \
, {0,NULL}, 0,NULL, 0,NULL, {0,NULL}, 0, {0,NULL} }


struct  Qrl__TransferCoinsResp
{
  ProtobufCMessage base;
  Qrl__TransactionExtended *extended_transaction_unsigned;
};
#define QRL__TRANSFER_COINS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transfer_coins_resp__descriptor) \
, NULL }


struct  Qrl__PushTransactionReq
{
  ProtobufCMessage base;
  Qrl__Transaction *transaction_signed;
};
#define QRL__PUSH_TRANSACTION_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__push_transaction_req__descriptor) \
, NULL }


struct  Qrl__PushTransactionResp
{
  ProtobufCMessage base;
  Qrl__PushTransactionResp__ResponseCode error_code;
  char *error_description;
  ProtobufCBinaryData tx_hash;
};
#define QRL__PUSH_TRANSACTION_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__push_transaction_resp__descriptor) \
, QRL__PUSH_TRANSACTION_RESP__RESPONSE_CODE__UNKNOWN, (char *)protobuf_c_empty_string, {0,NULL} }


struct  Qrl__MultiSigCreateTxnReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_addr;
  size_t n_signatories;
  ProtobufCBinaryData *signatories;
  size_t n_weights;
  uint32_t *weights;
  uint32_t threshold;
  uint64_t fee;
  ProtobufCBinaryData xmss_pk;
};
#define QRL__MULTI_SIG_CREATE_TXN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__multi_sig_create_txn_req__descriptor) \
, {0,NULL}, 0,NULL, 0,NULL, 0, 0, {0,NULL} }


struct  Qrl__MultiSigSpendTxnReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_addr;
  ProtobufCBinaryData multi_sig_address;
  size_t n_addrs_to;
  ProtobufCBinaryData *addrs_to;
  size_t n_amounts;
  uint64_t *amounts;
  uint64_t expiry_block_number;
  uint64_t fee;
  ProtobufCBinaryData xmss_pk;
};
#define QRL__MULTI_SIG_SPEND_TXN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__multi_sig_spend_txn_req__descriptor) \
, {0,NULL}, {0,NULL}, 0,NULL, 0,NULL, 0, 0, {0,NULL} }


struct  Qrl__MultiSigVoteTxnReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_addr;
  ProtobufCBinaryData shared_key;
  protobuf_c_boolean unvote;
  uint64_t fee;
  ProtobufCBinaryData xmss_pk;
};
#define QRL__MULTI_SIG_VOTE_TXN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__multi_sig_vote_txn_req__descriptor) \
, {0,NULL}, {0,NULL}, 0, 0, {0,NULL} }


struct  Qrl__MessageTxnReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_addr;
  ProtobufCBinaryData message;
  ProtobufCBinaryData addr_to;
  uint64_t fee;
  ProtobufCBinaryData xmss_pk;
};
#define QRL__MESSAGE_TXN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__message_txn_req__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL}, 0, {0,NULL} }


struct  Qrl__TokenTxnReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_addr;
  ProtobufCBinaryData symbol;
  ProtobufCBinaryData name;
  ProtobufCBinaryData owner;
  uint64_t decimals;
  size_t n_initial_balances;
  Qrl__AddressAmount **initial_balances;
  uint64_t fee;
  ProtobufCBinaryData xmss_pk;
};
#define QRL__TOKEN_TXN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__token_txn_req__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, 0, 0,NULL, 0, {0,NULL} }


struct  Qrl__TransferTokenTxnReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_addr;
  size_t n_addresses_to;
  ProtobufCBinaryData *addresses_to;
  ProtobufCBinaryData token_txhash;
  size_t n_amounts;
  uint64_t *amounts;
  uint64_t fee;
  ProtobufCBinaryData xmss_pk;
};
#define QRL__TRANSFER_TOKEN_TXN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transfer_token_txn_req__descriptor) \
, {0,NULL}, 0,NULL, {0,NULL}, 0,NULL, 0, {0,NULL} }


struct  Qrl__SlaveTxnReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_addr;
  size_t n_slave_pks;
  ProtobufCBinaryData *slave_pks;
  size_t n_access_types;
  uint32_t *access_types;
  uint64_t fee;
  ProtobufCBinaryData xmss_pk;
};
#define QRL__SLAVE_TXN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__slave_txn_req__descriptor) \
, {0,NULL}, 0,NULL, 0,NULL, 0, {0,NULL} }


struct  Qrl__LatticeTxnReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_addr;
  ProtobufCBinaryData pk1;
  ProtobufCBinaryData pk2;
  ProtobufCBinaryData pk3;
  uint64_t fee;
  ProtobufCBinaryData xmss_pk;
};
#define QRL__LATTICE_TXN_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__lattice_txn_req__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, 0, {0,NULL} }


struct  Qrl__MiniTransaction
{
  ProtobufCMessage base;
  char *transaction_hash;
  protobuf_c_boolean out;
  uint64_t amount;
};
#define QRL__MINI_TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__mini_transaction__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0 }


struct  Qrl__GetTransactionReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData tx_hash;
};
#define QRL__GET_TRANSACTION_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_transaction_req__descriptor) \
, {0,NULL} }


struct  Qrl__GetTransactionResp
{
  ProtobufCMessage base;
  Qrl__Transaction *tx;
  uint64_t confirmations;
  uint64_t block_number;
  ProtobufCBinaryData block_header_hash;
  uint64_t timestamp;
  ProtobufCBinaryData addr_from;
};
#define QRL__GET_TRANSACTION_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_transaction_resp__descriptor) \
, NULL, 0, 0, {0,NULL}, 0, {0,NULL} }


struct  Qrl__GetMiniTransactionsByAddressReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  uint64_t item_per_page;
  uint64_t page_number;
};
#define QRL__GET_MINI_TRANSACTIONS_BY_ADDRESS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_mini_transactions_by_address_req__descriptor) \
, {0,NULL}, 0, 0 }


struct  Qrl__GetMiniTransactionsByAddressResp
{
  ProtobufCMessage base;
  size_t n_mini_transactions;
  Qrl__MiniTransaction **mini_transactions;
  uint64_t balance;
};
#define QRL__GET_MINI_TRANSACTIONS_BY_ADDRESS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_mini_transactions_by_address_resp__descriptor) \
, 0,NULL, 0 }


struct  Qrl__GetTransactionsByAddressReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  uint64_t item_per_page;
  uint64_t page_number;
};
#define QRL__GET_TRANSACTIONS_BY_ADDRESS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_transactions_by_address_req__descriptor) \
, {0,NULL}, 0, 0 }


struct  Qrl__GetTransactionsByAddressResp
{
  ProtobufCMessage base;
  size_t n_transactions_detail;
  Qrl__GetTransactionResp **transactions_detail;
};
#define QRL__GET_TRANSACTIONS_BY_ADDRESS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_transactions_by_address_resp__descriptor) \
, 0,NULL }


struct  Qrl__GetMultiSigSpendTxsByAddressReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  uint64_t item_per_page;
  uint64_t page_number;
  Qrl__GetMultiSigSpendTxsByAddressReq__FilterType filter_type;
};
#define QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_multi_sig_spend_txs_by_address_req__descriptor) \
, {0,NULL}, 0, 0, QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_REQ__FILTER_TYPE__NONE }


struct  Qrl__GetMultiSigSpendTxsByAddressResp
{
  ProtobufCMessage base;
  size_t n_transactions_detail;
  Qrl__GetTransactionResp **transactions_detail;
};
#define QRL__GET_MULTI_SIG_SPEND_TXS_BY_ADDRESS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_multi_sig_spend_txs_by_address_resp__descriptor) \
, 0,NULL }


struct  Qrl__GetVoteStatsReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData multi_sig_spend_tx_hash;
};
#define QRL__GET_VOTE_STATS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_vote_stats_req__descriptor) \
, {0,NULL} }


struct  Qrl__GetVoteStatsResp
{
  ProtobufCMessage base;
  Qrl__VoteStats *vote_stats;
};
#define QRL__GET_VOTE_STATS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_vote_stats_resp__descriptor) \
, NULL }


struct  Qrl__GetInboxMessagesByAddressResp
{
  ProtobufCMessage base;
  size_t n_transactions_detail;
  Qrl__GetTransactionResp **transactions_detail;
};
#define QRL__GET_INBOX_MESSAGES_BY_ADDRESS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_inbox_messages_by_address_resp__descriptor) \
, 0,NULL }


struct  Qrl__InboxMessage
{
  ProtobufCMessage base;
  ProtobufCBinaryData addr_from;
  uint64_t timestamp;
  ProtobufCBinaryData message;
  ProtobufCBinaryData tx_hash;
  uint64_t block_number;
};
#define QRL__INBOX_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__inbox_message__descriptor) \
, {0,NULL}, 0, {0,NULL}, {0,NULL}, 0 }


struct  Qrl__TokenDetail
{
  ProtobufCMessage base;
  ProtobufCBinaryData token_txhash;
  ProtobufCBinaryData name;
  ProtobufCBinaryData symbol;
  uint64_t balance;
};
#define QRL__TOKEN_DETAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__token_detail__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL}, 0 }


struct  Qrl__GetTokensByAddressResp
{
  ProtobufCMessage base;
  size_t n_tokens_detail;
  Qrl__TokenDetail **tokens_detail;
};
#define QRL__GET_TOKENS_BY_ADDRESS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_tokens_by_address_resp__descriptor) \
, 0,NULL }


struct  Qrl__SlaveDetail
{
  ProtobufCMessage base;
  ProtobufCBinaryData slave_address;
  uint64_t access_type;
};
#define QRL__SLAVE_DETAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__slave_detail__descriptor) \
, {0,NULL}, 0 }


struct  Qrl__GetSlavesByAddressResp
{
  ProtobufCMessage base;
  size_t n_slaves_detail;
  Qrl__SlaveDetail **slaves_detail;
};
#define QRL__GET_SLAVES_BY_ADDRESS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_slaves_by_address_resp__descriptor) \
, 0,NULL }


struct  Qrl__LatticePKsDetail
{
  ProtobufCMessage base;
  ProtobufCBinaryData pk1;
  ProtobufCBinaryData pk2;
  ProtobufCBinaryData pk3;
  ProtobufCBinaryData tx_hash;
};
#define QRL__LATTICE_PKS_DETAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__lattice_pks_detail__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL} }


struct  Qrl__GetLatticePKsByAddressResp
{
  ProtobufCMessage base;
  size_t n_lattice_pks_detail;
  Qrl__LatticePKsDetail **lattice_pks_detail;
};
#define QRL__GET_LATTICE_PKS_BY_ADDRESS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_lattice_pks_by_address_resp__descriptor) \
, 0,NULL }


struct  Qrl__MultiSigDetail
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  uint64_t balance;
};
#define QRL__MULTI_SIG_DETAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__multi_sig_detail__descriptor) \
, {0,NULL}, 0 }


struct  Qrl__GetMultiSigAddressesByAddressResp
{
  ProtobufCMessage base;
  size_t n_multi_sig_detail;
  Qrl__MultiSigDetail **multi_sig_detail;
};
#define QRL__GET_MULTI_SIG_ADDRESSES_BY_ADDRESS_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_multi_sig_addresses_by_address_resp__descriptor) \
, 0,NULL }


struct  Qrl__GetBalanceReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
};
#define QRL__GET_BALANCE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_balance_req__descriptor) \
, {0,NULL} }


struct  Qrl__GetBalanceResp
{
  ProtobufCMessage base;
  uint64_t balance;
};
#define QRL__GET_BALANCE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_balance_resp__descriptor) \
, 0 }


struct  Qrl__GetTotalBalanceReq
{
  ProtobufCMessage base;
  size_t n_addresses;
  ProtobufCBinaryData *addresses;
};
#define QRL__GET_TOTAL_BALANCE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_total_balance_req__descriptor) \
, 0,NULL }


struct  Qrl__GetTotalBalanceResp
{
  ProtobufCMessage base;
  uint64_t balance;
};
#define QRL__GET_TOTAL_BALANCE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_total_balance_resp__descriptor) \
, 0 }


struct  Qrl__GetOTSReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  uint64_t page_from;
  uint64_t page_count;
  uint64_t unused_ots_index_from;
};
#define QRL__GET_OTSREQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_otsreq__descriptor) \
, {0,NULL}, 0, 0, 0 }


struct  Qrl__OTSBitfieldByPage
{
  ProtobufCMessage base;
  size_t n_ots_bitfield;
  ProtobufCBinaryData *ots_bitfield;
  uint64_t page_number;
};
#define QRL__OTSBITFIELD_BY_PAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__otsbitfield_by_page__descriptor) \
, 0,NULL, 0 }


struct  Qrl__GetOTSResp
{
  ProtobufCMessage base;
  size_t n_ots_bitfield_by_page;
  Qrl__OTSBitfieldByPage **ots_bitfield_by_page;
  uint64_t next_unused_ots_index;
  protobuf_c_boolean unused_ots_index_found;
};
#define QRL__GET_OTSRESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_otsresp__descriptor) \
, 0,NULL, 0, 0 }


struct  Qrl__GetHeightReq
{
  ProtobufCMessage base;
};
#define QRL__GET_HEIGHT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_height_req__descriptor) \
 }


struct  Qrl__GetHeightResp
{
  ProtobufCMessage base;
  uint64_t height;
};
#define QRL__GET_HEIGHT_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_height_resp__descriptor) \
, 0 }


struct  Qrl__GetBlockReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData header_hash;
};
#define QRL__GET_BLOCK_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_block_req__descriptor) \
, {0,NULL} }


struct  Qrl__GetBlockResp
{
  ProtobufCMessage base;
  Qrl__Block *block;
};
#define QRL__GET_BLOCK_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_block_resp__descriptor) \
, NULL }


struct  Qrl__GetBlockByNumberReq
{
  ProtobufCMessage base;
  uint64_t block_number;
};
#define QRL__GET_BLOCK_BY_NUMBER_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_block_by_number_req__descriptor) \
, 0 }


struct  Qrl__GetBlockByNumberResp
{
  ProtobufCMessage base;
  Qrl__Block *block;
};
#define QRL__GET_BLOCK_BY_NUMBER_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_block_by_number_resp__descriptor) \
, NULL }


struct  Qrl__GetLocalAddressesReq
{
  ProtobufCMessage base;
};
#define QRL__GET_LOCAL_ADDRESSES_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_local_addresses_req__descriptor) \
 }


struct  Qrl__GetLocalAddressesResp
{
  ProtobufCMessage base;
  size_t n_addresses;
  ProtobufCBinaryData *addresses;
};
#define QRL__GET_LOCAL_ADDRESSES_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__get_local_addresses_resp__descriptor) \
, 0,NULL }


struct  Qrl__NodeInfo
{
  ProtobufCMessage base;
  char *version;
  Qrl__NodeInfo__State state;
  uint32_t num_connections;
  uint32_t num_known_peers;
  /*
   * Uptime in seconds
   */
  uint64_t uptime;
  uint64_t block_height;
  ProtobufCBinaryData block_last_hash;
  char *network_id;
};
#define QRL__NODE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__node_info__descriptor) \
, (char *)protobuf_c_empty_string, QRL__NODE_INFO__STATE__UNKNOWN, 0, 0, 0, 0, {0,NULL}, (char *)protobuf_c_empty_string }


struct  Qrl__AddressDescriptor
{
  ProtobufCMessage base;
  char *hash_function;
  char *signature_scheme;
  uint32_t tree_height;
  uint32_t signatures;
  char *address_format;
};
#define QRL__ADDRESS_DESCRIPTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__address_descriptor__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string }


struct  Qrl__StoredPeers
{
  ProtobufCMessage base;
  size_t n_peers;
  Qrl__Peer **peers;
};
#define QRL__STORED_PEERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__stored_peers__descriptor) \
, 0,NULL }


struct  Qrl__Peer
{
  ProtobufCMessage base;
  char *ip;
};
#define QRL__PEER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__peer__descriptor) \
, (char *)protobuf_c_empty_string }


struct  Qrl__AddressState__TokensEntry
{
  ProtobufCMessage base;
  char *key;
  uint64_t value;
};
#define QRL__ADDRESS_STATE__TOKENS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__address_state__tokens_entry__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


struct  Qrl__AddressState__SlavePksAccessTypeEntry
{
  ProtobufCMessage base;
  char *key;
  uint32_t value;
};
#define QRL__ADDRESS_STATE__SLAVE_PKS_ACCESS_TYPE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__address_state__slave_pks_access_type_entry__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


struct  Qrl__AddressState
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  uint64_t balance;
  /*
   * FIXME: Discuss. 32 or 64 bits?
   */
  uint64_t nonce;
  size_t n_ots_bitfield;
  ProtobufCBinaryData *ots_bitfield;
  size_t n_transaction_hashes;
  ProtobufCBinaryData *transaction_hashes;
  size_t n_tokens;
  Qrl__AddressState__TokensEntry **tokens;
  size_t n_latticepk_list;
  Qrl__LatticePK **latticepk_list;
  size_t n_slave_pks_access_type;
  Qrl__AddressState__SlavePksAccessTypeEntry **slave_pks_access_type;
  uint64_t ots_counter;
};
#define QRL__ADDRESS_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__address_state__descriptor) \
, {0,NULL}, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0 }


struct  Qrl__OptimizedAddressState
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  uint64_t balance;
  /*
   * FIXME: Discuss. 32 or 64 bits?
   */
  uint64_t nonce;
  /*
   * Keep track of last page till which all ots key has been used
   */
  uint64_t ots_bitfield_used_page;
  /*
   * Keep track of number of ots key that has been used
   */
  uint64_t used_ots_key_count;
  uint64_t transaction_hash_count;
  uint64_t tokens_count;
  uint64_t slaves_count;
  uint64_t lattice_pk_count;
  uint64_t multi_sig_address_count;
  uint64_t multi_sig_spend_count;
  uint64_t inbox_message_count;
  size_t n_foundation_multi_sig_spend_txn_hash;
  ProtobufCBinaryData *foundation_multi_sig_spend_txn_hash;
  size_t n_foundation_multi_sig_vote_txn_hash;
  ProtobufCBinaryData *foundation_multi_sig_vote_txn_hash;
  size_t n_unvotes;
  ProtobufCBinaryData *unvotes;
  size_t n_proposal_vote_stats;
  Qrl__Transaction **proposal_vote_stats;
};
#define QRL__OPTIMIZED_ADDRESS_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__optimized_address_state__descriptor) \
, {0,NULL}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  Qrl__MultiSigAddressState
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  ProtobufCBinaryData creation_tx_hash;
  uint64_t nonce;
  uint64_t balance;
  size_t n_signatories;
  ProtobufCBinaryData *signatories;
  size_t n_weights;
  uint32_t *weights;
  uint32_t threshold;
  uint64_t transaction_hash_count;
  uint64_t multi_sig_spend_count;
  /*
   * TODO: To be implemented
   */
  uint64_t multi_sig_address_count;
  size_t n_foundation_multi_sig_spend_txn_hash;
  ProtobufCBinaryData *foundation_multi_sig_spend_txn_hash;
  size_t n_foundation_multi_sig_vote_txn_hash;
  ProtobufCBinaryData *foundation_multi_sig_vote_txn_hash;
  size_t n_unvotes;
  ProtobufCBinaryData *unvotes;
  size_t n_proposal_vote_stats;
  Qrl__Transaction **proposal_vote_stats;
};
#define QRL__MULTI_SIG_ADDRESS_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__multi_sig_address_state__descriptor) \
, {0,NULL}, {0,NULL}, 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  Qrl__MultiSigAddressesList
{
  ProtobufCMessage base;
  size_t n_hashes;
  ProtobufCBinaryData *hashes;
};
#define QRL__MULTI_SIG_ADDRESSES_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__multi_sig_addresses_list__descriptor) \
, 0,NULL }


struct  Qrl__DataList
{
  ProtobufCMessage base;
  size_t n_values;
  ProtobufCBinaryData *values;
};
#define QRL__DATA_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__data_list__descriptor) \
, 0,NULL }


struct  Qrl__Bitfield
{
  ProtobufCMessage base;
  size_t n_bitfields;
  ProtobufCBinaryData *bitfields;
};
#define QRL__BITFIELD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__bitfield__descriptor) \
, 0,NULL }


struct  Qrl__TransactionHashList
{
  ProtobufCMessage base;
  size_t n_hashes;
  ProtobufCBinaryData *hashes;
};
#define QRL__TRANSACTION_HASH_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction_hash_list__descriptor) \
, 0,NULL }


struct  Qrl__LatticePK
{
  ProtobufCMessage base;
  ProtobufCBinaryData kyber_pk;
  ProtobufCBinaryData dilithium_pk;
};
#define QRL__LATTICE_PK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__lattice_pk__descriptor) \
, {0,NULL}, {0,NULL} }


struct  Qrl__AddressAmount
{
  ProtobufCMessage base;
  ProtobufCBinaryData address;
  uint64_t amount;
};
#define QRL__ADDRESS_AMOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__address_amount__descriptor) \
, {0,NULL}, 0 }


struct  Qrl__BlockHeader
{
  ProtobufCMessage base;
  /*
   * Header
   */
  ProtobufCBinaryData hash_header;
  uint64_t block_number;
  uint64_t timestamp_seconds;
  ProtobufCBinaryData hash_header_prev;
  uint64_t reward_block;
  uint64_t reward_fee;
  ProtobufCBinaryData merkle_root;
  uint32_t mining_nonce;
  uint64_t extra_nonce;
};
#define QRL__BLOCK_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__block_header__descriptor) \
, {0,NULL}, 0, 0, {0,NULL}, 0, 0, {0,NULL}, 0, 0 }


struct  Qrl__BlockHeaderExtended
{
  ProtobufCMessage base;
  Qrl__BlockHeader *header;
  Qrl__TransactionCount *transaction_count;
};
#define QRL__BLOCK_HEADER_EXTENDED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__block_header_extended__descriptor) \
, NULL, NULL }


struct  Qrl__TransactionCount__CountEntry
{
  ProtobufCMessage base;
  uint32_t key;
  uint32_t value;
};
#define QRL__TRANSACTION_COUNT__COUNT_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction_count__count_entry__descriptor) \
, 0, 0 }


struct  Qrl__TransactionCount
{
  ProtobufCMessage base;
  size_t n_count;
  Qrl__TransactionCount__CountEntry **count;
};
#define QRL__TRANSACTION_COUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction_count__descriptor) \
, 0,NULL }


struct  Qrl__TransactionExtended
{
  ProtobufCMessage base;
  Qrl__BlockHeader *header;
  Qrl__Transaction *tx;
  ProtobufCBinaryData addr_from;
  uint64_t size;
  uint64_t timestamp_seconds;
};
#define QRL__TRANSACTION_EXTENDED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction_extended__descriptor) \
, NULL, NULL, {0,NULL}, 0, 0 }


struct  Qrl__BlockExtended
{
  ProtobufCMessage base;
  Qrl__BlockHeader *header;
  size_t n_extended_transactions;
  Qrl__TransactionExtended **extended_transactions;
  /*
   * This is only applicable to genesis blocks
   */
  size_t n_genesis_balance;
  Qrl__GenesisBalance **genesis_balance;
  uint64_t size;
};
#define QRL__BLOCK_EXTENDED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__block_extended__descriptor) \
, NULL, 0,NULL, 0,NULL, 0 }


struct  Qrl__Block
{
  ProtobufCMessage base;
  Qrl__BlockHeader *header;
  size_t n_transactions;
  Qrl__Transaction **transactions;
  /*
   * This is only applicable to genesis blocks
   */
  size_t n_genesis_balance;
  Qrl__GenesisBalance **genesis_balance;
};
#define QRL__BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__block__descriptor) \
, NULL, 0,NULL, 0,NULL }


struct  Qrl__GenesisBalance
{
  ProtobufCMessage base;
  /*
   * Address is string only here to increase visibility
   */
  ProtobufCBinaryData address;
  uint64_t balance;
};
#define QRL__GENESIS_BALANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__genesis_balance__descriptor) \
, {0,NULL}, 0 }


struct  Qrl__BlockMetaDataList
{
  ProtobufCMessage base;
  size_t n_block_number_hashes;
  Qrl__BlockMetaData **block_number_hashes;
};
#define QRL__BLOCK_META_DATA_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__block_meta_data_list__descriptor) \
, 0,NULL }


/*
 * ////////
 */
struct  Qrl__Transaction__Transfer
{
  ProtobufCMessage base;
  size_t n_addrs_to;
  ProtobufCBinaryData *addrs_to;
  size_t n_amounts;
  uint64_t *amounts;
  ProtobufCBinaryData message_data;
};
#define QRL__TRANSACTION__TRANSFER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__transfer__descriptor) \
, 0,NULL, 0,NULL, {0,NULL} }


struct  Qrl__Transaction__CoinBase
{
  ProtobufCMessage base;
  ProtobufCBinaryData addr_to;
  uint64_t amount;
};
#define QRL__TRANSACTION__COIN_BASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__coin_base__descriptor) \
, {0,NULL}, 0 }


struct  Qrl__Transaction__LatticePublicKey
{
  ProtobufCMessage base;
  /*
   * kyber_pk
   */
  ProtobufCBinaryData pk1;
  /*
   * dilithium_pk
   */
  ProtobufCBinaryData pk2;
  /*
   * ecdsa_pk
   */
  ProtobufCBinaryData pk3;
};
#define QRL__TRANSACTION__LATTICE_PUBLIC_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__lattice_public_key__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL} }


struct  Qrl__Transaction__Message
{
  ProtobufCMessage base;
  ProtobufCBinaryData message_hash;
  ProtobufCBinaryData addr_to;
};
#define QRL__TRANSACTION__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__message__descriptor) \
, {0,NULL}, {0,NULL} }


struct  Qrl__Transaction__Token
{
  ProtobufCMessage base;
  ProtobufCBinaryData symbol;
  ProtobufCBinaryData name;
  ProtobufCBinaryData owner;
  uint64_t decimals;
  size_t n_initial_balances;
  Qrl__AddressAmount **initial_balances;
};
#define QRL__TRANSACTION__TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__token__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL}, 0, 0,NULL }


struct  Qrl__Transaction__TransferToken
{
  ProtobufCMessage base;
  ProtobufCBinaryData token_txhash;
  size_t n_addrs_to;
  ProtobufCBinaryData *addrs_to;
  size_t n_amounts;
  uint64_t *amounts;
};
#define QRL__TRANSACTION__TRANSFER_TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__transfer_token__descriptor) \
, {0,NULL}, 0,NULL, 0,NULL }


struct  Qrl__Transaction__Slave
{
  ProtobufCMessage base;
  size_t n_slave_pks;
  ProtobufCBinaryData *slave_pks;
  size_t n_access_types;
  uint32_t *access_types;
};
#define QRL__TRANSACTION__SLAVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__slave__descriptor) \
, 0,NULL, 0,NULL }


struct  Qrl__Transaction__MultiSigCreate
{
  ProtobufCMessage base;
  size_t n_signatories;
  ProtobufCBinaryData *signatories;
  size_t n_weights;
  uint32_t *weights;
  uint32_t threshold;
};
#define QRL__TRANSACTION__MULTI_SIG_CREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__multi_sig_create__descriptor) \
, 0,NULL, 0,NULL, 0 }


struct  Qrl__Transaction__MultiSigSpend
{
  ProtobufCMessage base;
  ProtobufCBinaryData multi_sig_address;
  size_t n_addrs_to;
  ProtobufCBinaryData *addrs_to;
  size_t n_amounts;
  uint64_t *amounts;
  uint64_t expiry_block_number;
};
#define QRL__TRANSACTION__MULTI_SIG_SPEND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__multi_sig_spend__descriptor) \
, {0,NULL}, 0,NULL, 0,NULL, 0 }


struct  Qrl__Transaction__MultiSigVote
{
  ProtobufCMessage base;
  ProtobufCBinaryData shared_key;
  protobuf_c_boolean unvote;
  /*
   * To be used internally by State
   */
  ProtobufCBinaryData prev_tx_hash;
};
#define QRL__TRANSACTION__MULTI_SIG_VOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__multi_sig_vote__descriptor) \
, {0,NULL}, 0, {0,NULL} }


struct  Qrl__Transaction__ProposalCreate__QIP
{
  ProtobufCMessage base;
  char *qip_link;
};
#define QRL__TRANSACTION__PROPOSAL_CREATE__QIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__proposal_create__qip__descriptor) \
, (char *)protobuf_c_empty_string }


struct  Qrl__Transaction__ProposalCreate__Config
{
  ProtobufCMessage base;
  size_t n_changes_bitfield;
  ProtobufCBinaryData *changes_bitfield;
  uint64_t reorg_limit;
  uint64_t max_coin_supply;
  uint64_t complete_emission_time_span_in_years;
  uint64_t mining_nonce_offset;
  uint64_t extra_nonce_offset;
  uint64_t mining_blob_size_in_bytes;
  uint64_t block_timing_in_seconds;
  uint64_t number_of_blocks_analyze;
  /*
   * Support upto 2 decimal places
   */
  uint64_t block_size_multiplier;
  uint64_t block_min_size_limit_in_bytes;
  uint64_t transaction_multi_output_limit;
  uint64_t message_max_length;
  uint64_t token_symbol_max_length;
  uint64_t token_name_max_length;
  uint64_t lattice_pk1_max_length;
  uint64_t lattice_pk2_max_length;
  uint64_t lattice_pk3_max_length;
  uint64_t foundation_multi_sig_address_threshold_percentage;
  uint64_t proposal_threshold_per;
  size_t n_proposal_default_options;
  char **proposal_default_options;
  uint64_t description_max_length;
  uint64_t options_max_number;
  uint64_t option_max_text_length;
  uint64_t proposal_config_activation_delay;
  uint64_t n_measurement;
  uint64_t kp;
};
#define QRL__TRANSACTION__PROPOSAL_CREATE__CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__proposal_create__config__descriptor) \
, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  Qrl__Transaction__ProposalCreate__Other
{
  ProtobufCMessage base;
  size_t n_options;
  char **options;
};
#define QRL__TRANSACTION__PROPOSAL_CREATE__OTHER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__proposal_create__other__descriptor) \
, 0,NULL }


typedef enum {
  QRL__TRANSACTION__PROPOSAL_CREATE__PROPOSAL_TYPE__NOT_SET = 0,
  QRL__TRANSACTION__PROPOSAL_CREATE__PROPOSAL_TYPE_QIP = 3,
  QRL__TRANSACTION__PROPOSAL_CREATE__PROPOSAL_TYPE_CONFIG = 4,
  QRL__TRANSACTION__PROPOSAL_CREATE__PROPOSAL_TYPE_OTHER = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(QRL__TRANSACTION__PROPOSAL_CREATE__PROPOSAL_TYPE__CASE)
} Qrl__Transaction__ProposalCreate__ProposalTypeCase;

struct  Qrl__Transaction__ProposalCreate
{
  ProtobufCMessage base;
  uint64_t expiry_block_number;
  char *description;
  Qrl__Transaction__ProposalCreate__ProposalTypeCase proposal_type_case;
  union {
    Qrl__Transaction__ProposalCreate__QIP *qip;
    Qrl__Transaction__ProposalCreate__Config *config;
    Qrl__Transaction__ProposalCreate__Other *other;
  };
};
#define QRL__TRANSACTION__PROPOSAL_CREATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__proposal_create__descriptor) \
, 0, (char *)protobuf_c_empty_string, QRL__TRANSACTION__PROPOSAL_CREATE__PROPOSAL_TYPE__NOT_SET, {0} }


struct  Qrl__Transaction__ProposalVote
{
  ProtobufCMessage base;
  ProtobufCBinaryData shared_key;
  uint32_t option;
};
#define QRL__TRANSACTION__PROPOSAL_VOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__proposal_vote__descriptor) \
, {0,NULL}, 0 }


typedef enum {
  QRL__TRANSACTION__TRANSACTION_TYPE__NOT_SET = 0,
  QRL__TRANSACTION__TRANSACTION_TYPE_TRANSFER = 7,
  QRL__TRANSACTION__TRANSACTION_TYPE_COINBASE = 8,
  QRL__TRANSACTION__TRANSACTION_TYPE_LATTICE_PK = 9,
  QRL__TRANSACTION__TRANSACTION_TYPE_MESSAGE = 10,
  QRL__TRANSACTION__TRANSACTION_TYPE_TOKEN = 11,
  QRL__TRANSACTION__TRANSACTION_TYPE_TRANSFER_TOKEN = 12,
  QRL__TRANSACTION__TRANSACTION_TYPE_SLAVE = 13,
  QRL__TRANSACTION__TRANSACTION_TYPE_MULTI_SIG_CREATE = 14,
  QRL__TRANSACTION__TRANSACTION_TYPE_MULTI_SIG_SPEND = 15,
  QRL__TRANSACTION__TRANSACTION_TYPE_MULTI_SIG_VOTE = 16,
  QRL__TRANSACTION__TRANSACTION_TYPE_PROPOSAL_CREATE = 17,
  QRL__TRANSACTION__TRANSACTION_TYPE_PROPOSAL_VOTE = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(QRL__TRANSACTION__TRANSACTION_TYPE__CASE)
} Qrl__Transaction__TransactionTypeCase;

struct  Qrl__Transaction
{
  ProtobufCMessage base;
  ProtobufCBinaryData master_addr;
  uint64_t fee;
  ProtobufCBinaryData public_key;
  ProtobufCBinaryData signature;
  uint64_t nonce;
  ProtobufCBinaryData transaction_hash;
  Qrl__Transaction__TransactionTypeCase transaction_type_case;
  union {
    Qrl__Transaction__Transfer *transfer;
    Qrl__Transaction__CoinBase *coinbase;
    Qrl__Transaction__LatticePublicKey *latticepk;
    Qrl__Transaction__Message *message;
    Qrl__Transaction__Token *token;
    Qrl__Transaction__TransferToken *transfer_token;
    Qrl__Transaction__Slave *slave;
    Qrl__Transaction__MultiSigCreate *multi_sig_create;
    Qrl__Transaction__MultiSigSpend *multi_sig_spend;
    Qrl__Transaction__MultiSigVote *multi_sig_vote;
    Qrl__Transaction__ProposalCreate *proposal_create;
    Qrl__Transaction__ProposalVote *proposal_vote;
  };
};
#define QRL__TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__transaction__descriptor) \
, {0,NULL}, 0, {0,NULL}, {0,NULL}, 0, {0,NULL}, QRL__TRANSACTION__TRANSACTION_TYPE__NOT_SET, {0} }


struct  Qrl__VoteStats
{
  ProtobufCMessage base;
  ProtobufCBinaryData multi_sig_address;
  ProtobufCBinaryData shared_key;
  size_t n_signatories;
  ProtobufCBinaryData *signatories;
  size_t n_tx_hashes;
  ProtobufCBinaryData *tx_hashes;
  size_t n_unvotes;
  protobuf_c_boolean *unvotes;
  uint64_t expiry_block_number;
  uint64_t total_weight;
  protobuf_c_boolean executed;
};
#define QRL__VOTE_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__vote_stats__descriptor) \
, {0,NULL}, {0,NULL}, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0 }


struct  Qrl__ProposalVoteStats
{
  ProtobufCMessage base;
  ProtobufCBinaryData addr_from;
  ProtobufCBinaryData shared_key;
  char *proposal_type;
  size_t n_weight_by_option;
  uint64_t *weight_by_option;
  uint64_t expiry_block_number;
  protobuf_c_boolean executed;
  /*
   * Keep track of number of pages for vote txn hash
   */
  uint64_t number_of_tx_hashes;
};
#define QRL__PROPOSAL_VOTE_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__proposal_vote_stats__descriptor) \
, {0,NULL}, {0,NULL}, (char *)protobuf_c_empty_string, 0,NULL, 0, 0, 0 }


struct  Qrl__ProposalRecord
{
  ProtobufCMessage base;
  uint64_t number_of_tx_hashes;
};
#define QRL__PROPOSAL_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__proposal_record__descriptor) \
, 0 }


struct  Qrl__TokenList
{
  ProtobufCMessage base;
  size_t n_token_txhash;
  ProtobufCBinaryData *token_txhash;
};
#define QRL__TOKEN_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__token_list__descriptor) \
, 0,NULL }


struct  Qrl__TokenBalance
{
  ProtobufCMessage base;
  uint64_t balance;
  uint64_t decimals;
  /*
   * Tx hash responsible for the creation of this data
   */
  ProtobufCBinaryData tx_hash;
  /*
   * For internal use only
   */
  protobuf_c_boolean delete_;
};
#define QRL__TOKEN_BALANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__token_balance__descriptor) \
, 0, 0, {0,NULL}, 0 }


struct  Qrl__SlaveMetadata
{
  ProtobufCMessage base;
  uint64_t access_type;
  ProtobufCBinaryData tx_hash;
  protobuf_c_boolean delete_;
};
#define QRL__SLAVE_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__slave_metadata__descriptor) \
, 0, {0,NULL}, 0 }


struct  Qrl__LatticePKMetadata
{
  ProtobufCMessage base;
  protobuf_c_boolean enabled;
  ProtobufCBinaryData tx_hash;
  protobuf_c_boolean delete_;
};
#define QRL__LATTICE_PKMETADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__lattice_pkmetadata__descriptor) \
, 0, {0,NULL}, 0 }


struct  Qrl__TokenMetadata
{
  ProtobufCMessage base;
  ProtobufCBinaryData token_txhash;
  size_t n_transfer_token_tx_hashes;
  ProtobufCBinaryData *transfer_token_tx_hashes;
};
#define QRL__TOKEN_METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__token_metadata__descriptor) \
, {0,NULL}, 0,NULL }


struct  Qrl__EncryptedEphemeralMessage__Channel
{
  ProtobufCMessage base;
  /*
   * aes256_symkey encrypted by kyber
   */
  ProtobufCBinaryData enc_aes256_symkey;
};
#define QRL__ENCRYPTED_EPHEMERAL_MESSAGE__CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__encrypted_ephemeral_message__channel__descriptor) \
, {0,NULL} }


struct  Qrl__EncryptedEphemeralMessage
{
  ProtobufCMessage base;
  /*
   * b'NEW' or PRF
   */
  ProtobufCBinaryData msg_id;
  /*
   * Expiry Timestamp in seconds
   */
  uint64_t ttl;
  /*
   * Time to relay
   */
  uint64_t ttr;
  Qrl__EncryptedEphemeralMessage__Channel *channel;
  /*
   * nonce
   */
  uint64_t nonce;
  /*
   * JSON content, encrypted by aes256_symkey
   */
  ProtobufCBinaryData payload;
};
#define QRL__ENCRYPTED_EPHEMERAL_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__encrypted_ephemeral_message__descriptor) \
, {0,NULL}, 0, 0, NULL, 0, {0,NULL} }


struct  Qrl__AddressList
{
  ProtobufCMessage base;
  size_t n_addresses;
  ProtobufCBinaryData *addresses;
};
#define QRL__ADDRESS_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__address_list__descriptor) \
, 0,NULL }


struct  Qrl__BlockHeightData
{
  ProtobufCMessage base;
  uint64_t block_number;
  ProtobufCBinaryData block_headerhash;
  ProtobufCBinaryData cumulative_difficulty;
};
#define QRL__BLOCK_HEIGHT_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__block_height_data__descriptor) \
, 0, {0,NULL}, {0,NULL} }


struct  Qrl__BlockMetaData
{
  ProtobufCMessage base;
  ProtobufCBinaryData block_difficulty;
  ProtobufCBinaryData cumulative_difficulty;
  size_t n_child_headerhashes;
  ProtobufCBinaryData *child_headerhashes;
  /*
   * Keeps last N headerhashes, for measurement of timestamp difference
   */
  size_t n_last_n_headerhashes;
  ProtobufCBinaryData *last_n_headerhashes;
};
#define QRL__BLOCK_META_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__block_meta_data__descriptor) \
, {0,NULL}, {0,NULL}, 0,NULL, 0,NULL }


struct  Qrl__BlockNumberMapping
{
  ProtobufCMessage base;
  ProtobufCBinaryData headerhash;
  ProtobufCBinaryData prev_headerhash;
};
#define QRL__BLOCK_NUMBER_MAPPING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__block_number_mapping__descriptor) \
, {0,NULL}, {0,NULL} }


struct  Qrl__PeerStat
{
  ProtobufCMessage base;
  ProtobufCBinaryData peer_ip;
  uint32_t port;
  Qrl__NodeChainState *node_chain_state;
};
#define QRL__PEER_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__peer_stat__descriptor) \
, {0,NULL}, 0, NULL }


struct  Qrl__NodeChainState
{
  ProtobufCMessage base;
  uint64_t block_number;
  ProtobufCBinaryData header_hash;
  ProtobufCBinaryData cumulative_difficulty;
  char *version;
  uint64_t timestamp;
};
#define QRL__NODE_CHAIN_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__node_chain_state__descriptor) \
, 0, {0,NULL}, {0,NULL}, (char *)protobuf_c_empty_string, 0 }


struct  Qrl__NodeHeaderHash
{
  ProtobufCMessage base;
  uint64_t block_number;
  size_t n_headerhashes;
  ProtobufCBinaryData *headerhashes;
};
#define QRL__NODE_HEADER_HASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__node_header_hash__descriptor) \
, 0, 0,NULL }


struct  Qrl__P2PAcknowledgement
{
  ProtobufCMessage base;
  uint32_t bytes_processed;
};
#define QRL__P2_PACKNOWLEDGEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__p2_packnowledgement__descriptor) \
, 0 }


struct  Qrl__PeerInfo
{
  ProtobufCMessage base;
  ProtobufCBinaryData peer_ip;
  uint32_t port;
  uint32_t banned_timestamp;
  uint32_t credibility;
  size_t n_last_connections_timestamp;
  uint32_t *last_connections_timestamp;
};
#define QRL__PEER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__peer_info__descriptor) \
, {0,NULL}, 0, 0, 0, 0,NULL }


struct  Qrl__Peers
{
  ProtobufCMessage base;
  size_t n_peer_info_list;
  Qrl__PeerInfo **peer_info_list;
};
#define QRL__PEERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__peers__descriptor) \
, 0,NULL }


struct  Qrl__DevConfig__Chain
{
  ProtobufCMessage base;
  uint64_t reorg_limit;
  uint64_t max_coin_supply;
  uint64_t complete_emission_time_span_in_years;
};
#define QRL__DEV_CONFIG__CHAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__chain__descriptor) \
, 0, 0, 0 }


struct  Qrl__DevConfig__Block__BlockSizeController
{
  ProtobufCMessage base;
  uint64_t number_of_blocks_analyze;
  /*
   * Support upto 2 decimal places
   */
  uint64_t size_multiplier;
  uint64_t block_min_size_limit_in_bytes;
};
#define QRL__DEV_CONFIG__BLOCK__BLOCK_SIZE_CONTROLLER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__block__block_size_controller__descriptor) \
, 0, 0, 0 }


struct  Qrl__DevConfig__Block
{
  ProtobufCMessage base;
  uint64_t mining_nonce_offset;
  uint64_t extra_nonce_offset;
  uint64_t mining_blob_size_in_bytes;
  uint64_t block_timing_in_seconds;
  Qrl__DevConfig__Block__BlockSizeController *block_size_controller;
};
#define QRL__DEV_CONFIG__BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__block__descriptor) \
, 0, 0, 0, 0, NULL }


struct  Qrl__DevConfig__Transaction__Message
{
  ProtobufCMessage base;
  uint64_t max_length;
};
#define QRL__DEV_CONFIG__TRANSACTION__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__transaction__message__descriptor) \
, 0 }


struct  Qrl__DevConfig__Transaction__Slave
{
  ProtobufCMessage base;
  uint64_t slave_pk_max_length;
};
#define QRL__DEV_CONFIG__TRANSACTION__SLAVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__transaction__slave__descriptor) \
, 0 }


struct  Qrl__DevConfig__Transaction__Token
{
  ProtobufCMessage base;
  uint64_t symbol_max_length;
  uint64_t name_max_length;
};
#define QRL__DEV_CONFIG__TRANSACTION__TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__transaction__token__descriptor) \
, 0, 0 }


struct  Qrl__DevConfig__Transaction__Lattice
{
  ProtobufCMessage base;
  uint64_t pk1_max_length;
  uint64_t pk2_max_length;
  uint64_t pk3_max_length;
};
#define QRL__DEV_CONFIG__TRANSACTION__LATTICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__transaction__lattice__descriptor) \
, 0, 0, 0 }


struct  Qrl__DevConfig__Transaction__FoundationMultiSig
{
  ProtobufCMessage base;
  /*
   * Support upto 2 decimal places
   */
  uint64_t threshold_percentage;
};
#define QRL__DEV_CONFIG__TRANSACTION__FOUNDATION_MULTI_SIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__transaction__foundation_multi_sig__descriptor) \
, 0 }


struct  Qrl__DevConfig__Transaction__Proposal
{
  ProtobufCMessage base;
  /*
   * Support upto 2 decimal places
   */
  uint64_t threshold_per;
  /*
   * Convention: All strings must be in capital letters
   */
  size_t n_default_options;
  char **default_options;
  uint64_t description_max_length;
  uint64_t options_max_number;
  uint64_t option_max_text_length;
  uint64_t proposal_config_activation_delay;
};
#define QRL__DEV_CONFIG__TRANSACTION__PROPOSAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__transaction__proposal__descriptor) \
, 0, 0,NULL, 0, 0, 0, 0 }


struct  Qrl__DevConfig__Transaction
{
  ProtobufCMessage base;
  uint64_t multi_output_limit;
  Qrl__DevConfig__Transaction__Message *message;
  Qrl__DevConfig__Transaction__Slave *slave;
  Qrl__DevConfig__Transaction__Token *token;
  Qrl__DevConfig__Transaction__Lattice *lattice;
  Qrl__DevConfig__Transaction__FoundationMultiSig *foundation_multi_sig;
  Qrl__DevConfig__Transaction__Proposal *proposal;
};
#define QRL__DEV_CONFIG__TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__transaction__descriptor) \
, 0, NULL, NULL, NULL, NULL, NULL, NULL }


struct  Qrl__DevConfig__POW
{
  ProtobufCMessage base;
  uint64_t n_measurement;
  uint64_t kp;
};
#define QRL__DEV_CONFIG__POW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__pow__descriptor) \
, 0, 0 }


struct  Qrl__DevConfig
{
  ProtobufCMessage base;
  ProtobufCBinaryData prev_state_key;
  ProtobufCBinaryData current_state_key;
  ProtobufCBinaryData activation_header_hash;
  uint64_t activation_block_number;
  Qrl__DevConfig__Chain *chain;
  Qrl__DevConfig__Block *block;
  Qrl__DevConfig__Transaction *transaction;
  Qrl__DevConfig__POW *pow;
};
#define QRL__DEV_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&qrl__dev_config__descriptor) \
, {0,NULL}, {0,NULL}, {0,NULL}, 0, NULL, NULL, NULL, NULL }


/* Qrl__Empty methods */
void   qrl__empty__init
                     (Qrl__Empty         *message);
size_t qrl__empty__get_packed_size
                     (const Qrl__Empty   *message);
size_t qrl__empty__pack
                     (const Qrl__Empty   *message,
                      uint8_t             *out);
size_t qrl__empty__pack_to_buffer
                     (const Qrl__Empty   *message,
                      ProtobufCBuffer     *buffer);
Qrl__Empty *
       qrl__empty__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__empty__free_unpacked
                     (Qrl__Empty *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetNodeStateReq methods */
void   qrl__get_node_state_req__init
                     (Qrl__GetNodeStateReq         *message);
size_t qrl__get_node_state_req__get_packed_size
                     (const Qrl__GetNodeStateReq   *message);
size_t qrl__get_node_state_req__pack
                     (const Qrl__GetNodeStateReq   *message,
                      uint8_t             *out);
size_t qrl__get_node_state_req__pack_to_buffer
                     (const Qrl__GetNodeStateReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetNodeStateReq *
       qrl__get_node_state_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_node_state_req__free_unpacked
                     (Qrl__GetNodeStateReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetNodeStateResp methods */
void   qrl__get_node_state_resp__init
                     (Qrl__GetNodeStateResp         *message);
size_t qrl__get_node_state_resp__get_packed_size
                     (const Qrl__GetNodeStateResp   *message);
size_t qrl__get_node_state_resp__pack
                     (const Qrl__GetNodeStateResp   *message,
                      uint8_t             *out);
size_t qrl__get_node_state_resp__pack_to_buffer
                     (const Qrl__GetNodeStateResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetNodeStateResp *
       qrl__get_node_state_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_node_state_resp__free_unpacked
                     (Qrl__GetNodeStateResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetKnownPeersReq methods */
void   qrl__get_known_peers_req__init
                     (Qrl__GetKnownPeersReq         *message);
size_t qrl__get_known_peers_req__get_packed_size
                     (const Qrl__GetKnownPeersReq   *message);
size_t qrl__get_known_peers_req__pack
                     (const Qrl__GetKnownPeersReq   *message,
                      uint8_t             *out);
size_t qrl__get_known_peers_req__pack_to_buffer
                     (const Qrl__GetKnownPeersReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetKnownPeersReq *
       qrl__get_known_peers_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_known_peers_req__free_unpacked
                     (Qrl__GetKnownPeersReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetKnownPeersResp methods */
void   qrl__get_known_peers_resp__init
                     (Qrl__GetKnownPeersResp         *message);
size_t qrl__get_known_peers_resp__get_packed_size
                     (const Qrl__GetKnownPeersResp   *message);
size_t qrl__get_known_peers_resp__pack
                     (const Qrl__GetKnownPeersResp   *message,
                      uint8_t             *out);
size_t qrl__get_known_peers_resp__pack_to_buffer
                     (const Qrl__GetKnownPeersResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetKnownPeersResp *
       qrl__get_known_peers_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_known_peers_resp__free_unpacked
                     (Qrl__GetKnownPeersResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetPeersStatReq methods */
void   qrl__get_peers_stat_req__init
                     (Qrl__GetPeersStatReq         *message);
size_t qrl__get_peers_stat_req__get_packed_size
                     (const Qrl__GetPeersStatReq   *message);
size_t qrl__get_peers_stat_req__pack
                     (const Qrl__GetPeersStatReq   *message,
                      uint8_t             *out);
size_t qrl__get_peers_stat_req__pack_to_buffer
                     (const Qrl__GetPeersStatReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetPeersStatReq *
       qrl__get_peers_stat_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_peers_stat_req__free_unpacked
                     (Qrl__GetPeersStatReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetPeersStatResp methods */
void   qrl__get_peers_stat_resp__init
                     (Qrl__GetPeersStatResp         *message);
size_t qrl__get_peers_stat_resp__get_packed_size
                     (const Qrl__GetPeersStatResp   *message);
size_t qrl__get_peers_stat_resp__pack
                     (const Qrl__GetPeersStatResp   *message,
                      uint8_t             *out);
size_t qrl__get_peers_stat_resp__pack_to_buffer
                     (const Qrl__GetPeersStatResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetPeersStatResp *
       qrl__get_peers_stat_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_peers_stat_resp__free_unpacked
                     (Qrl__GetPeersStatResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetChainStatsReq methods */
void   qrl__get_chain_stats_req__init
                     (Qrl__GetChainStatsReq         *message);
size_t qrl__get_chain_stats_req__get_packed_size
                     (const Qrl__GetChainStatsReq   *message);
size_t qrl__get_chain_stats_req__pack
                     (const Qrl__GetChainStatsReq   *message,
                      uint8_t             *out);
size_t qrl__get_chain_stats_req__pack_to_buffer
                     (const Qrl__GetChainStatsReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetChainStatsReq *
       qrl__get_chain_stats_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_chain_stats_req__free_unpacked
                     (Qrl__GetChainStatsReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetChainStatsResp methods */
void   qrl__get_chain_stats_resp__init
                     (Qrl__GetChainStatsResp         *message);
size_t qrl__get_chain_stats_resp__get_packed_size
                     (const Qrl__GetChainStatsResp   *message);
size_t qrl__get_chain_stats_resp__pack
                     (const Qrl__GetChainStatsResp   *message,
                      uint8_t             *out);
size_t qrl__get_chain_stats_resp__pack_to_buffer
                     (const Qrl__GetChainStatsResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetChainStatsResp *
       qrl__get_chain_stats_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_chain_stats_resp__free_unpacked
                     (Qrl__GetChainStatsResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetStatsReq methods */
void   qrl__get_stats_req__init
                     (Qrl__GetStatsReq         *message);
size_t qrl__get_stats_req__get_packed_size
                     (const Qrl__GetStatsReq   *message);
size_t qrl__get_stats_req__pack
                     (const Qrl__GetStatsReq   *message,
                      uint8_t             *out);
size_t qrl__get_stats_req__pack_to_buffer
                     (const Qrl__GetStatsReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetStatsReq *
       qrl__get_stats_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_stats_req__free_unpacked
                     (Qrl__GetStatsReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetStatsResp methods */
void   qrl__get_stats_resp__init
                     (Qrl__GetStatsResp         *message);
size_t qrl__get_stats_resp__get_packed_size
                     (const Qrl__GetStatsResp   *message);
size_t qrl__get_stats_resp__pack
                     (const Qrl__GetStatsResp   *message,
                      uint8_t             *out);
size_t qrl__get_stats_resp__pack_to_buffer
                     (const Qrl__GetStatsResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetStatsResp *
       qrl__get_stats_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_stats_resp__free_unpacked
                     (Qrl__GetStatsResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetAddressFromPKReq methods */
void   qrl__get_address_from_pkreq__init
                     (Qrl__GetAddressFromPKReq         *message);
size_t qrl__get_address_from_pkreq__get_packed_size
                     (const Qrl__GetAddressFromPKReq   *message);
size_t qrl__get_address_from_pkreq__pack
                     (const Qrl__GetAddressFromPKReq   *message,
                      uint8_t             *out);
size_t qrl__get_address_from_pkreq__pack_to_buffer
                     (const Qrl__GetAddressFromPKReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetAddressFromPKReq *
       qrl__get_address_from_pkreq__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_address_from_pkreq__free_unpacked
                     (Qrl__GetAddressFromPKReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetAddressFromPKResp methods */
void   qrl__get_address_from_pkresp__init
                     (Qrl__GetAddressFromPKResp         *message);
size_t qrl__get_address_from_pkresp__get_packed_size
                     (const Qrl__GetAddressFromPKResp   *message);
size_t qrl__get_address_from_pkresp__pack
                     (const Qrl__GetAddressFromPKResp   *message,
                      uint8_t             *out);
size_t qrl__get_address_from_pkresp__pack_to_buffer
                     (const Qrl__GetAddressFromPKResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetAddressFromPKResp *
       qrl__get_address_from_pkresp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_address_from_pkresp__free_unpacked
                     (Qrl__GetAddressFromPKResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__BlockDataPoint methods */
void   qrl__block_data_point__init
                     (Qrl__BlockDataPoint         *message);
size_t qrl__block_data_point__get_packed_size
                     (const Qrl__BlockDataPoint   *message);
size_t qrl__block_data_point__pack
                     (const Qrl__BlockDataPoint   *message,
                      uint8_t             *out);
size_t qrl__block_data_point__pack_to_buffer
                     (const Qrl__BlockDataPoint   *message,
                      ProtobufCBuffer     *buffer);
Qrl__BlockDataPoint *
       qrl__block_data_point__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__block_data_point__free_unpacked
                     (Qrl__BlockDataPoint *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetAddressStateReq methods */
void   qrl__get_address_state_req__init
                     (Qrl__GetAddressStateReq         *message);
size_t qrl__get_address_state_req__get_packed_size
                     (const Qrl__GetAddressStateReq   *message);
size_t qrl__get_address_state_req__pack
                     (const Qrl__GetAddressStateReq   *message,
                      uint8_t             *out);
size_t qrl__get_address_state_req__pack_to_buffer
                     (const Qrl__GetAddressStateReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetAddressStateReq *
       qrl__get_address_state_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_address_state_req__free_unpacked
                     (Qrl__GetAddressStateReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetAddressStateResp methods */
void   qrl__get_address_state_resp__init
                     (Qrl__GetAddressStateResp         *message);
size_t qrl__get_address_state_resp__get_packed_size
                     (const Qrl__GetAddressStateResp   *message);
size_t qrl__get_address_state_resp__pack
                     (const Qrl__GetAddressStateResp   *message,
                      uint8_t             *out);
size_t qrl__get_address_state_resp__pack_to_buffer
                     (const Qrl__GetAddressStateResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetAddressStateResp *
       qrl__get_address_state_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_address_state_resp__free_unpacked
                     (Qrl__GetAddressStateResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetOptimizedAddressStateResp methods */
void   qrl__get_optimized_address_state_resp__init
                     (Qrl__GetOptimizedAddressStateResp         *message);
size_t qrl__get_optimized_address_state_resp__get_packed_size
                     (const Qrl__GetOptimizedAddressStateResp   *message);
size_t qrl__get_optimized_address_state_resp__pack
                     (const Qrl__GetOptimizedAddressStateResp   *message,
                      uint8_t             *out);
size_t qrl__get_optimized_address_state_resp__pack_to_buffer
                     (const Qrl__GetOptimizedAddressStateResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetOptimizedAddressStateResp *
       qrl__get_optimized_address_state_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_optimized_address_state_resp__free_unpacked
                     (Qrl__GetOptimizedAddressStateResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetMultiSigAddressStateReq methods */
void   qrl__get_multi_sig_address_state_req__init
                     (Qrl__GetMultiSigAddressStateReq         *message);
size_t qrl__get_multi_sig_address_state_req__get_packed_size
                     (const Qrl__GetMultiSigAddressStateReq   *message);
size_t qrl__get_multi_sig_address_state_req__pack
                     (const Qrl__GetMultiSigAddressStateReq   *message,
                      uint8_t             *out);
size_t qrl__get_multi_sig_address_state_req__pack_to_buffer
                     (const Qrl__GetMultiSigAddressStateReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetMultiSigAddressStateReq *
       qrl__get_multi_sig_address_state_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_multi_sig_address_state_req__free_unpacked
                     (Qrl__GetMultiSigAddressStateReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetMultiSigAddressStateResp methods */
void   qrl__get_multi_sig_address_state_resp__init
                     (Qrl__GetMultiSigAddressStateResp         *message);
size_t qrl__get_multi_sig_address_state_resp__get_packed_size
                     (const Qrl__GetMultiSigAddressStateResp   *message);
size_t qrl__get_multi_sig_address_state_resp__pack
                     (const Qrl__GetMultiSigAddressStateResp   *message,
                      uint8_t             *out);
size_t qrl__get_multi_sig_address_state_resp__pack_to_buffer
                     (const Qrl__GetMultiSigAddressStateResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetMultiSigAddressStateResp *
       qrl__get_multi_sig_address_state_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_multi_sig_address_state_resp__free_unpacked
                     (Qrl__GetMultiSigAddressStateResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__IsSlaveReq methods */
void   qrl__is_slave_req__init
                     (Qrl__IsSlaveReq         *message);
size_t qrl__is_slave_req__get_packed_size
                     (const Qrl__IsSlaveReq   *message);
size_t qrl__is_slave_req__pack
                     (const Qrl__IsSlaveReq   *message,
                      uint8_t             *out);
size_t qrl__is_slave_req__pack_to_buffer
                     (const Qrl__IsSlaveReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__IsSlaveReq *
       qrl__is_slave_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__is_slave_req__free_unpacked
                     (Qrl__IsSlaveReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__IsSlaveResp methods */
void   qrl__is_slave_resp__init
                     (Qrl__IsSlaveResp         *message);
size_t qrl__is_slave_resp__get_packed_size
                     (const Qrl__IsSlaveResp   *message);
size_t qrl__is_slave_resp__pack
                     (const Qrl__IsSlaveResp   *message,
                      uint8_t             *out);
size_t qrl__is_slave_resp__pack_to_buffer
                     (const Qrl__IsSlaveResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__IsSlaveResp *
       qrl__is_slave_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__is_slave_resp__free_unpacked
                     (Qrl__IsSlaveResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__ParseAddressReq methods */
void   qrl__parse_address_req__init
                     (Qrl__ParseAddressReq         *message);
size_t qrl__parse_address_req__get_packed_size
                     (const Qrl__ParseAddressReq   *message);
size_t qrl__parse_address_req__pack
                     (const Qrl__ParseAddressReq   *message,
                      uint8_t             *out);
size_t qrl__parse_address_req__pack_to_buffer
                     (const Qrl__ParseAddressReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__ParseAddressReq *
       qrl__parse_address_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__parse_address_req__free_unpacked
                     (Qrl__ParseAddressReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__ParseAddressResp methods */
void   qrl__parse_address_resp__init
                     (Qrl__ParseAddressResp         *message);
size_t qrl__parse_address_resp__get_packed_size
                     (const Qrl__ParseAddressResp   *message);
size_t qrl__parse_address_resp__pack
                     (const Qrl__ParseAddressResp   *message,
                      uint8_t             *out);
size_t qrl__parse_address_resp__pack_to_buffer
                     (const Qrl__ParseAddressResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__ParseAddressResp *
       qrl__parse_address_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__parse_address_resp__free_unpacked
                     (Qrl__ParseAddressResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetObjectReq methods */
void   qrl__get_object_req__init
                     (Qrl__GetObjectReq         *message);
size_t qrl__get_object_req__get_packed_size
                     (const Qrl__GetObjectReq   *message);
size_t qrl__get_object_req__pack
                     (const Qrl__GetObjectReq   *message,
                      uint8_t             *out);
size_t qrl__get_object_req__pack_to_buffer
                     (const Qrl__GetObjectReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetObjectReq *
       qrl__get_object_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_object_req__free_unpacked
                     (Qrl__GetObjectReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetObjectResp methods */
void   qrl__get_object_resp__init
                     (Qrl__GetObjectResp         *message);
size_t qrl__get_object_resp__get_packed_size
                     (const Qrl__GetObjectResp   *message);
size_t qrl__get_object_resp__pack
                     (const Qrl__GetObjectResp   *message,
                      uint8_t             *out);
size_t qrl__get_object_resp__pack_to_buffer
                     (const Qrl__GetObjectResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetObjectResp *
       qrl__get_object_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_object_resp__free_unpacked
                     (Qrl__GetObjectResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetLatestDataReq methods */
void   qrl__get_latest_data_req__init
                     (Qrl__GetLatestDataReq         *message);
size_t qrl__get_latest_data_req__get_packed_size
                     (const Qrl__GetLatestDataReq   *message);
size_t qrl__get_latest_data_req__pack
                     (const Qrl__GetLatestDataReq   *message,
                      uint8_t             *out);
size_t qrl__get_latest_data_req__pack_to_buffer
                     (const Qrl__GetLatestDataReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetLatestDataReq *
       qrl__get_latest_data_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_latest_data_req__free_unpacked
                     (Qrl__GetLatestDataReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetLatestDataResp methods */
void   qrl__get_latest_data_resp__init
                     (Qrl__GetLatestDataResp         *message);
size_t qrl__get_latest_data_resp__get_packed_size
                     (const Qrl__GetLatestDataResp   *message);
size_t qrl__get_latest_data_resp__pack
                     (const Qrl__GetLatestDataResp   *message,
                      uint8_t             *out);
size_t qrl__get_latest_data_resp__pack_to_buffer
                     (const Qrl__GetLatestDataResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetLatestDataResp *
       qrl__get_latest_data_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_latest_data_resp__free_unpacked
                     (Qrl__GetLatestDataResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TransferCoinsReq methods */
void   qrl__transfer_coins_req__init
                     (Qrl__TransferCoinsReq         *message);
size_t qrl__transfer_coins_req__get_packed_size
                     (const Qrl__TransferCoinsReq   *message);
size_t qrl__transfer_coins_req__pack
                     (const Qrl__TransferCoinsReq   *message,
                      uint8_t             *out);
size_t qrl__transfer_coins_req__pack_to_buffer
                     (const Qrl__TransferCoinsReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TransferCoinsReq *
       qrl__transfer_coins_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__transfer_coins_req__free_unpacked
                     (Qrl__TransferCoinsReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TransferCoinsResp methods */
void   qrl__transfer_coins_resp__init
                     (Qrl__TransferCoinsResp         *message);
size_t qrl__transfer_coins_resp__get_packed_size
                     (const Qrl__TransferCoinsResp   *message);
size_t qrl__transfer_coins_resp__pack
                     (const Qrl__TransferCoinsResp   *message,
                      uint8_t             *out);
size_t qrl__transfer_coins_resp__pack_to_buffer
                     (const Qrl__TransferCoinsResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TransferCoinsResp *
       qrl__transfer_coins_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__transfer_coins_resp__free_unpacked
                     (Qrl__TransferCoinsResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__PushTransactionReq methods */
void   qrl__push_transaction_req__init
                     (Qrl__PushTransactionReq         *message);
size_t qrl__push_transaction_req__get_packed_size
                     (const Qrl__PushTransactionReq   *message);
size_t qrl__push_transaction_req__pack
                     (const Qrl__PushTransactionReq   *message,
                      uint8_t             *out);
size_t qrl__push_transaction_req__pack_to_buffer
                     (const Qrl__PushTransactionReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__PushTransactionReq *
       qrl__push_transaction_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__push_transaction_req__free_unpacked
                     (Qrl__PushTransactionReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__PushTransactionResp methods */
void   qrl__push_transaction_resp__init
                     (Qrl__PushTransactionResp         *message);
size_t qrl__push_transaction_resp__get_packed_size
                     (const Qrl__PushTransactionResp   *message);
size_t qrl__push_transaction_resp__pack
                     (const Qrl__PushTransactionResp   *message,
                      uint8_t             *out);
size_t qrl__push_transaction_resp__pack_to_buffer
                     (const Qrl__PushTransactionResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__PushTransactionResp *
       qrl__push_transaction_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__push_transaction_resp__free_unpacked
                     (Qrl__PushTransactionResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__MultiSigCreateTxnReq methods */
void   qrl__multi_sig_create_txn_req__init
                     (Qrl__MultiSigCreateTxnReq         *message);
size_t qrl__multi_sig_create_txn_req__get_packed_size
                     (const Qrl__MultiSigCreateTxnReq   *message);
size_t qrl__multi_sig_create_txn_req__pack
                     (const Qrl__MultiSigCreateTxnReq   *message,
                      uint8_t             *out);
size_t qrl__multi_sig_create_txn_req__pack_to_buffer
                     (const Qrl__MultiSigCreateTxnReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__MultiSigCreateTxnReq *
       qrl__multi_sig_create_txn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__multi_sig_create_txn_req__free_unpacked
                     (Qrl__MultiSigCreateTxnReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__MultiSigSpendTxnReq methods */
void   qrl__multi_sig_spend_txn_req__init
                     (Qrl__MultiSigSpendTxnReq         *message);
size_t qrl__multi_sig_spend_txn_req__get_packed_size
                     (const Qrl__MultiSigSpendTxnReq   *message);
size_t qrl__multi_sig_spend_txn_req__pack
                     (const Qrl__MultiSigSpendTxnReq   *message,
                      uint8_t             *out);
size_t qrl__multi_sig_spend_txn_req__pack_to_buffer
                     (const Qrl__MultiSigSpendTxnReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__MultiSigSpendTxnReq *
       qrl__multi_sig_spend_txn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__multi_sig_spend_txn_req__free_unpacked
                     (Qrl__MultiSigSpendTxnReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__MultiSigVoteTxnReq methods */
void   qrl__multi_sig_vote_txn_req__init
                     (Qrl__MultiSigVoteTxnReq         *message);
size_t qrl__multi_sig_vote_txn_req__get_packed_size
                     (const Qrl__MultiSigVoteTxnReq   *message);
size_t qrl__multi_sig_vote_txn_req__pack
                     (const Qrl__MultiSigVoteTxnReq   *message,
                      uint8_t             *out);
size_t qrl__multi_sig_vote_txn_req__pack_to_buffer
                     (const Qrl__MultiSigVoteTxnReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__MultiSigVoteTxnReq *
       qrl__multi_sig_vote_txn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__multi_sig_vote_txn_req__free_unpacked
                     (Qrl__MultiSigVoteTxnReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__MessageTxnReq methods */
void   qrl__message_txn_req__init
                     (Qrl__MessageTxnReq         *message);
size_t qrl__message_txn_req__get_packed_size
                     (const Qrl__MessageTxnReq   *message);
size_t qrl__message_txn_req__pack
                     (const Qrl__MessageTxnReq   *message,
                      uint8_t             *out);
size_t qrl__message_txn_req__pack_to_buffer
                     (const Qrl__MessageTxnReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__MessageTxnReq *
       qrl__message_txn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__message_txn_req__free_unpacked
                     (Qrl__MessageTxnReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TokenTxnReq methods */
void   qrl__token_txn_req__init
                     (Qrl__TokenTxnReq         *message);
size_t qrl__token_txn_req__get_packed_size
                     (const Qrl__TokenTxnReq   *message);
size_t qrl__token_txn_req__pack
                     (const Qrl__TokenTxnReq   *message,
                      uint8_t             *out);
size_t qrl__token_txn_req__pack_to_buffer
                     (const Qrl__TokenTxnReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TokenTxnReq *
       qrl__token_txn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__token_txn_req__free_unpacked
                     (Qrl__TokenTxnReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TransferTokenTxnReq methods */
void   qrl__transfer_token_txn_req__init
                     (Qrl__TransferTokenTxnReq         *message);
size_t qrl__transfer_token_txn_req__get_packed_size
                     (const Qrl__TransferTokenTxnReq   *message);
size_t qrl__transfer_token_txn_req__pack
                     (const Qrl__TransferTokenTxnReq   *message,
                      uint8_t             *out);
size_t qrl__transfer_token_txn_req__pack_to_buffer
                     (const Qrl__TransferTokenTxnReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TransferTokenTxnReq *
       qrl__transfer_token_txn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__transfer_token_txn_req__free_unpacked
                     (Qrl__TransferTokenTxnReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__SlaveTxnReq methods */
void   qrl__slave_txn_req__init
                     (Qrl__SlaveTxnReq         *message);
size_t qrl__slave_txn_req__get_packed_size
                     (const Qrl__SlaveTxnReq   *message);
size_t qrl__slave_txn_req__pack
                     (const Qrl__SlaveTxnReq   *message,
                      uint8_t             *out);
size_t qrl__slave_txn_req__pack_to_buffer
                     (const Qrl__SlaveTxnReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__SlaveTxnReq *
       qrl__slave_txn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__slave_txn_req__free_unpacked
                     (Qrl__SlaveTxnReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__LatticeTxnReq methods */
void   qrl__lattice_txn_req__init
                     (Qrl__LatticeTxnReq         *message);
size_t qrl__lattice_txn_req__get_packed_size
                     (const Qrl__LatticeTxnReq   *message);
size_t qrl__lattice_txn_req__pack
                     (const Qrl__LatticeTxnReq   *message,
                      uint8_t             *out);
size_t qrl__lattice_txn_req__pack_to_buffer
                     (const Qrl__LatticeTxnReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__LatticeTxnReq *
       qrl__lattice_txn_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__lattice_txn_req__free_unpacked
                     (Qrl__LatticeTxnReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__MiniTransaction methods */
void   qrl__mini_transaction__init
                     (Qrl__MiniTransaction         *message);
size_t qrl__mini_transaction__get_packed_size
                     (const Qrl__MiniTransaction   *message);
size_t qrl__mini_transaction__pack
                     (const Qrl__MiniTransaction   *message,
                      uint8_t             *out);
size_t qrl__mini_transaction__pack_to_buffer
                     (const Qrl__MiniTransaction   *message,
                      ProtobufCBuffer     *buffer);
Qrl__MiniTransaction *
       qrl__mini_transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__mini_transaction__free_unpacked
                     (Qrl__MiniTransaction *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetTransactionReq methods */
void   qrl__get_transaction_req__init
                     (Qrl__GetTransactionReq         *message);
size_t qrl__get_transaction_req__get_packed_size
                     (const Qrl__GetTransactionReq   *message);
size_t qrl__get_transaction_req__pack
                     (const Qrl__GetTransactionReq   *message,
                      uint8_t             *out);
size_t qrl__get_transaction_req__pack_to_buffer
                     (const Qrl__GetTransactionReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetTransactionReq *
       qrl__get_transaction_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_transaction_req__free_unpacked
                     (Qrl__GetTransactionReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetTransactionResp methods */
void   qrl__get_transaction_resp__init
                     (Qrl__GetTransactionResp         *message);
size_t qrl__get_transaction_resp__get_packed_size
                     (const Qrl__GetTransactionResp   *message);
size_t qrl__get_transaction_resp__pack
                     (const Qrl__GetTransactionResp   *message,
                      uint8_t             *out);
size_t qrl__get_transaction_resp__pack_to_buffer
                     (const Qrl__GetTransactionResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetTransactionResp *
       qrl__get_transaction_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_transaction_resp__free_unpacked
                     (Qrl__GetTransactionResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetMiniTransactionsByAddressReq methods */
void   qrl__get_mini_transactions_by_address_req__init
                     (Qrl__GetMiniTransactionsByAddressReq         *message);
size_t qrl__get_mini_transactions_by_address_req__get_packed_size
                     (const Qrl__GetMiniTransactionsByAddressReq   *message);
size_t qrl__get_mini_transactions_by_address_req__pack
                     (const Qrl__GetMiniTransactionsByAddressReq   *message,
                      uint8_t             *out);
size_t qrl__get_mini_transactions_by_address_req__pack_to_buffer
                     (const Qrl__GetMiniTransactionsByAddressReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetMiniTransactionsByAddressReq *
       qrl__get_mini_transactions_by_address_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_mini_transactions_by_address_req__free_unpacked
                     (Qrl__GetMiniTransactionsByAddressReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetMiniTransactionsByAddressResp methods */
void   qrl__get_mini_transactions_by_address_resp__init
                     (Qrl__GetMiniTransactionsByAddressResp         *message);
size_t qrl__get_mini_transactions_by_address_resp__get_packed_size
                     (const Qrl__GetMiniTransactionsByAddressResp   *message);
size_t qrl__get_mini_transactions_by_address_resp__pack
                     (const Qrl__GetMiniTransactionsByAddressResp   *message,
                      uint8_t             *out);
size_t qrl__get_mini_transactions_by_address_resp__pack_to_buffer
                     (const Qrl__GetMiniTransactionsByAddressResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetMiniTransactionsByAddressResp *
       qrl__get_mini_transactions_by_address_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_mini_transactions_by_address_resp__free_unpacked
                     (Qrl__GetMiniTransactionsByAddressResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetTransactionsByAddressReq methods */
void   qrl__get_transactions_by_address_req__init
                     (Qrl__GetTransactionsByAddressReq         *message);
size_t qrl__get_transactions_by_address_req__get_packed_size
                     (const Qrl__GetTransactionsByAddressReq   *message);
size_t qrl__get_transactions_by_address_req__pack
                     (const Qrl__GetTransactionsByAddressReq   *message,
                      uint8_t             *out);
size_t qrl__get_transactions_by_address_req__pack_to_buffer
                     (const Qrl__GetTransactionsByAddressReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetTransactionsByAddressReq *
       qrl__get_transactions_by_address_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_transactions_by_address_req__free_unpacked
                     (Qrl__GetTransactionsByAddressReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetTransactionsByAddressResp methods */
void   qrl__get_transactions_by_address_resp__init
                     (Qrl__GetTransactionsByAddressResp         *message);
size_t qrl__get_transactions_by_address_resp__get_packed_size
                     (const Qrl__GetTransactionsByAddressResp   *message);
size_t qrl__get_transactions_by_address_resp__pack
                     (const Qrl__GetTransactionsByAddressResp   *message,
                      uint8_t             *out);
size_t qrl__get_transactions_by_address_resp__pack_to_buffer
                     (const Qrl__GetTransactionsByAddressResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetTransactionsByAddressResp *
       qrl__get_transactions_by_address_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_transactions_by_address_resp__free_unpacked
                     (Qrl__GetTransactionsByAddressResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetMultiSigSpendTxsByAddressReq methods */
void   qrl__get_multi_sig_spend_txs_by_address_req__init
                     (Qrl__GetMultiSigSpendTxsByAddressReq         *message);
size_t qrl__get_multi_sig_spend_txs_by_address_req__get_packed_size
                     (const Qrl__GetMultiSigSpendTxsByAddressReq   *message);
size_t qrl__get_multi_sig_spend_txs_by_address_req__pack
                     (const Qrl__GetMultiSigSpendTxsByAddressReq   *message,
                      uint8_t             *out);
size_t qrl__get_multi_sig_spend_txs_by_address_req__pack_to_buffer
                     (const Qrl__GetMultiSigSpendTxsByAddressReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetMultiSigSpendTxsByAddressReq *
       qrl__get_multi_sig_spend_txs_by_address_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_multi_sig_spend_txs_by_address_req__free_unpacked
                     (Qrl__GetMultiSigSpendTxsByAddressReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetMultiSigSpendTxsByAddressResp methods */
void   qrl__get_multi_sig_spend_txs_by_address_resp__init
                     (Qrl__GetMultiSigSpendTxsByAddressResp         *message);
size_t qrl__get_multi_sig_spend_txs_by_address_resp__get_packed_size
                     (const Qrl__GetMultiSigSpendTxsByAddressResp   *message);
size_t qrl__get_multi_sig_spend_txs_by_address_resp__pack
                     (const Qrl__GetMultiSigSpendTxsByAddressResp   *message,
                      uint8_t             *out);
size_t qrl__get_multi_sig_spend_txs_by_address_resp__pack_to_buffer
                     (const Qrl__GetMultiSigSpendTxsByAddressResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetMultiSigSpendTxsByAddressResp *
       qrl__get_multi_sig_spend_txs_by_address_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_multi_sig_spend_txs_by_address_resp__free_unpacked
                     (Qrl__GetMultiSigSpendTxsByAddressResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetVoteStatsReq methods */
void   qrl__get_vote_stats_req__init
                     (Qrl__GetVoteStatsReq         *message);
size_t qrl__get_vote_stats_req__get_packed_size
                     (const Qrl__GetVoteStatsReq   *message);
size_t qrl__get_vote_stats_req__pack
                     (const Qrl__GetVoteStatsReq   *message,
                      uint8_t             *out);
size_t qrl__get_vote_stats_req__pack_to_buffer
                     (const Qrl__GetVoteStatsReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetVoteStatsReq *
       qrl__get_vote_stats_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_vote_stats_req__free_unpacked
                     (Qrl__GetVoteStatsReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetVoteStatsResp methods */
void   qrl__get_vote_stats_resp__init
                     (Qrl__GetVoteStatsResp         *message);
size_t qrl__get_vote_stats_resp__get_packed_size
                     (const Qrl__GetVoteStatsResp   *message);
size_t qrl__get_vote_stats_resp__pack
                     (const Qrl__GetVoteStatsResp   *message,
                      uint8_t             *out);
size_t qrl__get_vote_stats_resp__pack_to_buffer
                     (const Qrl__GetVoteStatsResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetVoteStatsResp *
       qrl__get_vote_stats_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_vote_stats_resp__free_unpacked
                     (Qrl__GetVoteStatsResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetInboxMessagesByAddressResp methods */
void   qrl__get_inbox_messages_by_address_resp__init
                     (Qrl__GetInboxMessagesByAddressResp         *message);
size_t qrl__get_inbox_messages_by_address_resp__get_packed_size
                     (const Qrl__GetInboxMessagesByAddressResp   *message);
size_t qrl__get_inbox_messages_by_address_resp__pack
                     (const Qrl__GetInboxMessagesByAddressResp   *message,
                      uint8_t             *out);
size_t qrl__get_inbox_messages_by_address_resp__pack_to_buffer
                     (const Qrl__GetInboxMessagesByAddressResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetInboxMessagesByAddressResp *
       qrl__get_inbox_messages_by_address_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_inbox_messages_by_address_resp__free_unpacked
                     (Qrl__GetInboxMessagesByAddressResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__InboxMessage methods */
void   qrl__inbox_message__init
                     (Qrl__InboxMessage         *message);
size_t qrl__inbox_message__get_packed_size
                     (const Qrl__InboxMessage   *message);
size_t qrl__inbox_message__pack
                     (const Qrl__InboxMessage   *message,
                      uint8_t             *out);
size_t qrl__inbox_message__pack_to_buffer
                     (const Qrl__InboxMessage   *message,
                      ProtobufCBuffer     *buffer);
Qrl__InboxMessage *
       qrl__inbox_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__inbox_message__free_unpacked
                     (Qrl__InboxMessage *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TokenDetail methods */
void   qrl__token_detail__init
                     (Qrl__TokenDetail         *message);
size_t qrl__token_detail__get_packed_size
                     (const Qrl__TokenDetail   *message);
size_t qrl__token_detail__pack
                     (const Qrl__TokenDetail   *message,
                      uint8_t             *out);
size_t qrl__token_detail__pack_to_buffer
                     (const Qrl__TokenDetail   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TokenDetail *
       qrl__token_detail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__token_detail__free_unpacked
                     (Qrl__TokenDetail *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetTokensByAddressResp methods */
void   qrl__get_tokens_by_address_resp__init
                     (Qrl__GetTokensByAddressResp         *message);
size_t qrl__get_tokens_by_address_resp__get_packed_size
                     (const Qrl__GetTokensByAddressResp   *message);
size_t qrl__get_tokens_by_address_resp__pack
                     (const Qrl__GetTokensByAddressResp   *message,
                      uint8_t             *out);
size_t qrl__get_tokens_by_address_resp__pack_to_buffer
                     (const Qrl__GetTokensByAddressResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetTokensByAddressResp *
       qrl__get_tokens_by_address_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_tokens_by_address_resp__free_unpacked
                     (Qrl__GetTokensByAddressResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__SlaveDetail methods */
void   qrl__slave_detail__init
                     (Qrl__SlaveDetail         *message);
size_t qrl__slave_detail__get_packed_size
                     (const Qrl__SlaveDetail   *message);
size_t qrl__slave_detail__pack
                     (const Qrl__SlaveDetail   *message,
                      uint8_t             *out);
size_t qrl__slave_detail__pack_to_buffer
                     (const Qrl__SlaveDetail   *message,
                      ProtobufCBuffer     *buffer);
Qrl__SlaveDetail *
       qrl__slave_detail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__slave_detail__free_unpacked
                     (Qrl__SlaveDetail *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetSlavesByAddressResp methods */
void   qrl__get_slaves_by_address_resp__init
                     (Qrl__GetSlavesByAddressResp         *message);
size_t qrl__get_slaves_by_address_resp__get_packed_size
                     (const Qrl__GetSlavesByAddressResp   *message);
size_t qrl__get_slaves_by_address_resp__pack
                     (const Qrl__GetSlavesByAddressResp   *message,
                      uint8_t             *out);
size_t qrl__get_slaves_by_address_resp__pack_to_buffer
                     (const Qrl__GetSlavesByAddressResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetSlavesByAddressResp *
       qrl__get_slaves_by_address_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_slaves_by_address_resp__free_unpacked
                     (Qrl__GetSlavesByAddressResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__LatticePKsDetail methods */
void   qrl__lattice_pks_detail__init
                     (Qrl__LatticePKsDetail         *message);
size_t qrl__lattice_pks_detail__get_packed_size
                     (const Qrl__LatticePKsDetail   *message);
size_t qrl__lattice_pks_detail__pack
                     (const Qrl__LatticePKsDetail   *message,
                      uint8_t             *out);
size_t qrl__lattice_pks_detail__pack_to_buffer
                     (const Qrl__LatticePKsDetail   *message,
                      ProtobufCBuffer     *buffer);
Qrl__LatticePKsDetail *
       qrl__lattice_pks_detail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__lattice_pks_detail__free_unpacked
                     (Qrl__LatticePKsDetail *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetLatticePKsByAddressResp methods */
void   qrl__get_lattice_pks_by_address_resp__init
                     (Qrl__GetLatticePKsByAddressResp         *message);
size_t qrl__get_lattice_pks_by_address_resp__get_packed_size
                     (const Qrl__GetLatticePKsByAddressResp   *message);
size_t qrl__get_lattice_pks_by_address_resp__pack
                     (const Qrl__GetLatticePKsByAddressResp   *message,
                      uint8_t             *out);
size_t qrl__get_lattice_pks_by_address_resp__pack_to_buffer
                     (const Qrl__GetLatticePKsByAddressResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetLatticePKsByAddressResp *
       qrl__get_lattice_pks_by_address_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_lattice_pks_by_address_resp__free_unpacked
                     (Qrl__GetLatticePKsByAddressResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__MultiSigDetail methods */
void   qrl__multi_sig_detail__init
                     (Qrl__MultiSigDetail         *message);
size_t qrl__multi_sig_detail__get_packed_size
                     (const Qrl__MultiSigDetail   *message);
size_t qrl__multi_sig_detail__pack
                     (const Qrl__MultiSigDetail   *message,
                      uint8_t             *out);
size_t qrl__multi_sig_detail__pack_to_buffer
                     (const Qrl__MultiSigDetail   *message,
                      ProtobufCBuffer     *buffer);
Qrl__MultiSigDetail *
       qrl__multi_sig_detail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__multi_sig_detail__free_unpacked
                     (Qrl__MultiSigDetail *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetMultiSigAddressesByAddressResp methods */
void   qrl__get_multi_sig_addresses_by_address_resp__init
                     (Qrl__GetMultiSigAddressesByAddressResp         *message);
size_t qrl__get_multi_sig_addresses_by_address_resp__get_packed_size
                     (const Qrl__GetMultiSigAddressesByAddressResp   *message);
size_t qrl__get_multi_sig_addresses_by_address_resp__pack
                     (const Qrl__GetMultiSigAddressesByAddressResp   *message,
                      uint8_t             *out);
size_t qrl__get_multi_sig_addresses_by_address_resp__pack_to_buffer
                     (const Qrl__GetMultiSigAddressesByAddressResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetMultiSigAddressesByAddressResp *
       qrl__get_multi_sig_addresses_by_address_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_multi_sig_addresses_by_address_resp__free_unpacked
                     (Qrl__GetMultiSigAddressesByAddressResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetBalanceReq methods */
void   qrl__get_balance_req__init
                     (Qrl__GetBalanceReq         *message);
size_t qrl__get_balance_req__get_packed_size
                     (const Qrl__GetBalanceReq   *message);
size_t qrl__get_balance_req__pack
                     (const Qrl__GetBalanceReq   *message,
                      uint8_t             *out);
size_t qrl__get_balance_req__pack_to_buffer
                     (const Qrl__GetBalanceReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetBalanceReq *
       qrl__get_balance_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_balance_req__free_unpacked
                     (Qrl__GetBalanceReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetBalanceResp methods */
void   qrl__get_balance_resp__init
                     (Qrl__GetBalanceResp         *message);
size_t qrl__get_balance_resp__get_packed_size
                     (const Qrl__GetBalanceResp   *message);
size_t qrl__get_balance_resp__pack
                     (const Qrl__GetBalanceResp   *message,
                      uint8_t             *out);
size_t qrl__get_balance_resp__pack_to_buffer
                     (const Qrl__GetBalanceResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetBalanceResp *
       qrl__get_balance_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_balance_resp__free_unpacked
                     (Qrl__GetBalanceResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetTotalBalanceReq methods */
void   qrl__get_total_balance_req__init
                     (Qrl__GetTotalBalanceReq         *message);
size_t qrl__get_total_balance_req__get_packed_size
                     (const Qrl__GetTotalBalanceReq   *message);
size_t qrl__get_total_balance_req__pack
                     (const Qrl__GetTotalBalanceReq   *message,
                      uint8_t             *out);
size_t qrl__get_total_balance_req__pack_to_buffer
                     (const Qrl__GetTotalBalanceReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetTotalBalanceReq *
       qrl__get_total_balance_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_total_balance_req__free_unpacked
                     (Qrl__GetTotalBalanceReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetTotalBalanceResp methods */
void   qrl__get_total_balance_resp__init
                     (Qrl__GetTotalBalanceResp         *message);
size_t qrl__get_total_balance_resp__get_packed_size
                     (const Qrl__GetTotalBalanceResp   *message);
size_t qrl__get_total_balance_resp__pack
                     (const Qrl__GetTotalBalanceResp   *message,
                      uint8_t             *out);
size_t qrl__get_total_balance_resp__pack_to_buffer
                     (const Qrl__GetTotalBalanceResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetTotalBalanceResp *
       qrl__get_total_balance_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_total_balance_resp__free_unpacked
                     (Qrl__GetTotalBalanceResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetOTSReq methods */
void   qrl__get_otsreq__init
                     (Qrl__GetOTSReq         *message);
size_t qrl__get_otsreq__get_packed_size
                     (const Qrl__GetOTSReq   *message);
size_t qrl__get_otsreq__pack
                     (const Qrl__GetOTSReq   *message,
                      uint8_t             *out);
size_t qrl__get_otsreq__pack_to_buffer
                     (const Qrl__GetOTSReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetOTSReq *
       qrl__get_otsreq__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_otsreq__free_unpacked
                     (Qrl__GetOTSReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__OTSBitfieldByPage methods */
void   qrl__otsbitfield_by_page__init
                     (Qrl__OTSBitfieldByPage         *message);
size_t qrl__otsbitfield_by_page__get_packed_size
                     (const Qrl__OTSBitfieldByPage   *message);
size_t qrl__otsbitfield_by_page__pack
                     (const Qrl__OTSBitfieldByPage   *message,
                      uint8_t             *out);
size_t qrl__otsbitfield_by_page__pack_to_buffer
                     (const Qrl__OTSBitfieldByPage   *message,
                      ProtobufCBuffer     *buffer);
Qrl__OTSBitfieldByPage *
       qrl__otsbitfield_by_page__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__otsbitfield_by_page__free_unpacked
                     (Qrl__OTSBitfieldByPage *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetOTSResp methods */
void   qrl__get_otsresp__init
                     (Qrl__GetOTSResp         *message);
size_t qrl__get_otsresp__get_packed_size
                     (const Qrl__GetOTSResp   *message);
size_t qrl__get_otsresp__pack
                     (const Qrl__GetOTSResp   *message,
                      uint8_t             *out);
size_t qrl__get_otsresp__pack_to_buffer
                     (const Qrl__GetOTSResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetOTSResp *
       qrl__get_otsresp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_otsresp__free_unpacked
                     (Qrl__GetOTSResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetHeightReq methods */
void   qrl__get_height_req__init
                     (Qrl__GetHeightReq         *message);
size_t qrl__get_height_req__get_packed_size
                     (const Qrl__GetHeightReq   *message);
size_t qrl__get_height_req__pack
                     (const Qrl__GetHeightReq   *message,
                      uint8_t             *out);
size_t qrl__get_height_req__pack_to_buffer
                     (const Qrl__GetHeightReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetHeightReq *
       qrl__get_height_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_height_req__free_unpacked
                     (Qrl__GetHeightReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetHeightResp methods */
void   qrl__get_height_resp__init
                     (Qrl__GetHeightResp         *message);
size_t qrl__get_height_resp__get_packed_size
                     (const Qrl__GetHeightResp   *message);
size_t qrl__get_height_resp__pack
                     (const Qrl__GetHeightResp   *message,
                      uint8_t             *out);
size_t qrl__get_height_resp__pack_to_buffer
                     (const Qrl__GetHeightResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetHeightResp *
       qrl__get_height_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_height_resp__free_unpacked
                     (Qrl__GetHeightResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetBlockReq methods */
void   qrl__get_block_req__init
                     (Qrl__GetBlockReq         *message);
size_t qrl__get_block_req__get_packed_size
                     (const Qrl__GetBlockReq   *message);
size_t qrl__get_block_req__pack
                     (const Qrl__GetBlockReq   *message,
                      uint8_t             *out);
size_t qrl__get_block_req__pack_to_buffer
                     (const Qrl__GetBlockReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetBlockReq *
       qrl__get_block_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_block_req__free_unpacked
                     (Qrl__GetBlockReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetBlockResp methods */
void   qrl__get_block_resp__init
                     (Qrl__GetBlockResp         *message);
size_t qrl__get_block_resp__get_packed_size
                     (const Qrl__GetBlockResp   *message);
size_t qrl__get_block_resp__pack
                     (const Qrl__GetBlockResp   *message,
                      uint8_t             *out);
size_t qrl__get_block_resp__pack_to_buffer
                     (const Qrl__GetBlockResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetBlockResp *
       qrl__get_block_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_block_resp__free_unpacked
                     (Qrl__GetBlockResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetBlockByNumberReq methods */
void   qrl__get_block_by_number_req__init
                     (Qrl__GetBlockByNumberReq         *message);
size_t qrl__get_block_by_number_req__get_packed_size
                     (const Qrl__GetBlockByNumberReq   *message);
size_t qrl__get_block_by_number_req__pack
                     (const Qrl__GetBlockByNumberReq   *message,
                      uint8_t             *out);
size_t qrl__get_block_by_number_req__pack_to_buffer
                     (const Qrl__GetBlockByNumberReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetBlockByNumberReq *
       qrl__get_block_by_number_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_block_by_number_req__free_unpacked
                     (Qrl__GetBlockByNumberReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetBlockByNumberResp methods */
void   qrl__get_block_by_number_resp__init
                     (Qrl__GetBlockByNumberResp         *message);
size_t qrl__get_block_by_number_resp__get_packed_size
                     (const Qrl__GetBlockByNumberResp   *message);
size_t qrl__get_block_by_number_resp__pack
                     (const Qrl__GetBlockByNumberResp   *message,
                      uint8_t             *out);
size_t qrl__get_block_by_number_resp__pack_to_buffer
                     (const Qrl__GetBlockByNumberResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetBlockByNumberResp *
       qrl__get_block_by_number_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_block_by_number_resp__free_unpacked
                     (Qrl__GetBlockByNumberResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetLocalAddressesReq methods */
void   qrl__get_local_addresses_req__init
                     (Qrl__GetLocalAddressesReq         *message);
size_t qrl__get_local_addresses_req__get_packed_size
                     (const Qrl__GetLocalAddressesReq   *message);
size_t qrl__get_local_addresses_req__pack
                     (const Qrl__GetLocalAddressesReq   *message,
                      uint8_t             *out);
size_t qrl__get_local_addresses_req__pack_to_buffer
                     (const Qrl__GetLocalAddressesReq   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetLocalAddressesReq *
       qrl__get_local_addresses_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_local_addresses_req__free_unpacked
                     (Qrl__GetLocalAddressesReq *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GetLocalAddressesResp methods */
void   qrl__get_local_addresses_resp__init
                     (Qrl__GetLocalAddressesResp         *message);
size_t qrl__get_local_addresses_resp__get_packed_size
                     (const Qrl__GetLocalAddressesResp   *message);
size_t qrl__get_local_addresses_resp__pack
                     (const Qrl__GetLocalAddressesResp   *message,
                      uint8_t             *out);
size_t qrl__get_local_addresses_resp__pack_to_buffer
                     (const Qrl__GetLocalAddressesResp   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GetLocalAddressesResp *
       qrl__get_local_addresses_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__get_local_addresses_resp__free_unpacked
                     (Qrl__GetLocalAddressesResp *message,
                      ProtobufCAllocator *allocator);
/* Qrl__NodeInfo methods */
void   qrl__node_info__init
                     (Qrl__NodeInfo         *message);
size_t qrl__node_info__get_packed_size
                     (const Qrl__NodeInfo   *message);
size_t qrl__node_info__pack
                     (const Qrl__NodeInfo   *message,
                      uint8_t             *out);
size_t qrl__node_info__pack_to_buffer
                     (const Qrl__NodeInfo   *message,
                      ProtobufCBuffer     *buffer);
Qrl__NodeInfo *
       qrl__node_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__node_info__free_unpacked
                     (Qrl__NodeInfo *message,
                      ProtobufCAllocator *allocator);
/* Qrl__AddressDescriptor methods */
void   qrl__address_descriptor__init
                     (Qrl__AddressDescriptor         *message);
size_t qrl__address_descriptor__get_packed_size
                     (const Qrl__AddressDescriptor   *message);
size_t qrl__address_descriptor__pack
                     (const Qrl__AddressDescriptor   *message,
                      uint8_t             *out);
size_t qrl__address_descriptor__pack_to_buffer
                     (const Qrl__AddressDescriptor   *message,
                      ProtobufCBuffer     *buffer);
Qrl__AddressDescriptor *
       qrl__address_descriptor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__address_descriptor__free_unpacked
                     (Qrl__AddressDescriptor *message,
                      ProtobufCAllocator *allocator);
/* Qrl__StoredPeers methods */
void   qrl__stored_peers__init
                     (Qrl__StoredPeers         *message);
size_t qrl__stored_peers__get_packed_size
                     (const Qrl__StoredPeers   *message);
size_t qrl__stored_peers__pack
                     (const Qrl__StoredPeers   *message,
                      uint8_t             *out);
size_t qrl__stored_peers__pack_to_buffer
                     (const Qrl__StoredPeers   *message,
                      ProtobufCBuffer     *buffer);
Qrl__StoredPeers *
       qrl__stored_peers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__stored_peers__free_unpacked
                     (Qrl__StoredPeers *message,
                      ProtobufCAllocator *allocator);
/* Qrl__Peer methods */
void   qrl__peer__init
                     (Qrl__Peer         *message);
size_t qrl__peer__get_packed_size
                     (const Qrl__Peer   *message);
size_t qrl__peer__pack
                     (const Qrl__Peer   *message,
                      uint8_t             *out);
size_t qrl__peer__pack_to_buffer
                     (const Qrl__Peer   *message,
                      ProtobufCBuffer     *buffer);
Qrl__Peer *
       qrl__peer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__peer__free_unpacked
                     (Qrl__Peer *message,
                      ProtobufCAllocator *allocator);
/* Qrl__AddressState__TokensEntry methods */
void   qrl__address_state__tokens_entry__init
                     (Qrl__AddressState__TokensEntry         *message);
/* Qrl__AddressState__SlavePksAccessTypeEntry methods */
void   qrl__address_state__slave_pks_access_type_entry__init
                     (Qrl__AddressState__SlavePksAccessTypeEntry         *message);
/* Qrl__AddressState methods */
void   qrl__address_state__init
                     (Qrl__AddressState         *message);
size_t qrl__address_state__get_packed_size
                     (const Qrl__AddressState   *message);
size_t qrl__address_state__pack
                     (const Qrl__AddressState   *message,
                      uint8_t             *out);
size_t qrl__address_state__pack_to_buffer
                     (const Qrl__AddressState   *message,
                      ProtobufCBuffer     *buffer);
Qrl__AddressState *
       qrl__address_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__address_state__free_unpacked
                     (Qrl__AddressState *message,
                      ProtobufCAllocator *allocator);
/* Qrl__OptimizedAddressState methods */
void   qrl__optimized_address_state__init
                     (Qrl__OptimizedAddressState         *message);
size_t qrl__optimized_address_state__get_packed_size
                     (const Qrl__OptimizedAddressState   *message);
size_t qrl__optimized_address_state__pack
                     (const Qrl__OptimizedAddressState   *message,
                      uint8_t             *out);
size_t qrl__optimized_address_state__pack_to_buffer
                     (const Qrl__OptimizedAddressState   *message,
                      ProtobufCBuffer     *buffer);
Qrl__OptimizedAddressState *
       qrl__optimized_address_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__optimized_address_state__free_unpacked
                     (Qrl__OptimizedAddressState *message,
                      ProtobufCAllocator *allocator);
/* Qrl__MultiSigAddressState methods */
void   qrl__multi_sig_address_state__init
                     (Qrl__MultiSigAddressState         *message);
size_t qrl__multi_sig_address_state__get_packed_size
                     (const Qrl__MultiSigAddressState   *message);
size_t qrl__multi_sig_address_state__pack
                     (const Qrl__MultiSigAddressState   *message,
                      uint8_t             *out);
size_t qrl__multi_sig_address_state__pack_to_buffer
                     (const Qrl__MultiSigAddressState   *message,
                      ProtobufCBuffer     *buffer);
Qrl__MultiSigAddressState *
       qrl__multi_sig_address_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__multi_sig_address_state__free_unpacked
                     (Qrl__MultiSigAddressState *message,
                      ProtobufCAllocator *allocator);
/* Qrl__MultiSigAddressesList methods */
void   qrl__multi_sig_addresses_list__init
                     (Qrl__MultiSigAddressesList         *message);
size_t qrl__multi_sig_addresses_list__get_packed_size
                     (const Qrl__MultiSigAddressesList   *message);
size_t qrl__multi_sig_addresses_list__pack
                     (const Qrl__MultiSigAddressesList   *message,
                      uint8_t             *out);
size_t qrl__multi_sig_addresses_list__pack_to_buffer
                     (const Qrl__MultiSigAddressesList   *message,
                      ProtobufCBuffer     *buffer);
Qrl__MultiSigAddressesList *
       qrl__multi_sig_addresses_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__multi_sig_addresses_list__free_unpacked
                     (Qrl__MultiSigAddressesList *message,
                      ProtobufCAllocator *allocator);
/* Qrl__DataList methods */
void   qrl__data_list__init
                     (Qrl__DataList         *message);
size_t qrl__data_list__get_packed_size
                     (const Qrl__DataList   *message);
size_t qrl__data_list__pack
                     (const Qrl__DataList   *message,
                      uint8_t             *out);
size_t qrl__data_list__pack_to_buffer
                     (const Qrl__DataList   *message,
                      ProtobufCBuffer     *buffer);
Qrl__DataList *
       qrl__data_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__data_list__free_unpacked
                     (Qrl__DataList *message,
                      ProtobufCAllocator *allocator);
/* Qrl__Bitfield methods */
void   qrl__bitfield__init
                     (Qrl__Bitfield         *message);
size_t qrl__bitfield__get_packed_size
                     (const Qrl__Bitfield   *message);
size_t qrl__bitfield__pack
                     (const Qrl__Bitfield   *message,
                      uint8_t             *out);
size_t qrl__bitfield__pack_to_buffer
                     (const Qrl__Bitfield   *message,
                      ProtobufCBuffer     *buffer);
Qrl__Bitfield *
       qrl__bitfield__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__bitfield__free_unpacked
                     (Qrl__Bitfield *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TransactionHashList methods */
void   qrl__transaction_hash_list__init
                     (Qrl__TransactionHashList         *message);
size_t qrl__transaction_hash_list__get_packed_size
                     (const Qrl__TransactionHashList   *message);
size_t qrl__transaction_hash_list__pack
                     (const Qrl__TransactionHashList   *message,
                      uint8_t             *out);
size_t qrl__transaction_hash_list__pack_to_buffer
                     (const Qrl__TransactionHashList   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TransactionHashList *
       qrl__transaction_hash_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__transaction_hash_list__free_unpacked
                     (Qrl__TransactionHashList *message,
                      ProtobufCAllocator *allocator);
/* Qrl__LatticePK methods */
void   qrl__lattice_pk__init
                     (Qrl__LatticePK         *message);
size_t qrl__lattice_pk__get_packed_size
                     (const Qrl__LatticePK   *message);
size_t qrl__lattice_pk__pack
                     (const Qrl__LatticePK   *message,
                      uint8_t             *out);
size_t qrl__lattice_pk__pack_to_buffer
                     (const Qrl__LatticePK   *message,
                      ProtobufCBuffer     *buffer);
Qrl__LatticePK *
       qrl__lattice_pk__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__lattice_pk__free_unpacked
                     (Qrl__LatticePK *message,
                      ProtobufCAllocator *allocator);
/* Qrl__AddressAmount methods */
void   qrl__address_amount__init
                     (Qrl__AddressAmount         *message);
size_t qrl__address_amount__get_packed_size
                     (const Qrl__AddressAmount   *message);
size_t qrl__address_amount__pack
                     (const Qrl__AddressAmount   *message,
                      uint8_t             *out);
size_t qrl__address_amount__pack_to_buffer
                     (const Qrl__AddressAmount   *message,
                      ProtobufCBuffer     *buffer);
Qrl__AddressAmount *
       qrl__address_amount__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__address_amount__free_unpacked
                     (Qrl__AddressAmount *message,
                      ProtobufCAllocator *allocator);
/* Qrl__BlockHeader methods */
void   qrl__block_header__init
                     (Qrl__BlockHeader         *message);
size_t qrl__block_header__get_packed_size
                     (const Qrl__BlockHeader   *message);
size_t qrl__block_header__pack
                     (const Qrl__BlockHeader   *message,
                      uint8_t             *out);
size_t qrl__block_header__pack_to_buffer
                     (const Qrl__BlockHeader   *message,
                      ProtobufCBuffer     *buffer);
Qrl__BlockHeader *
       qrl__block_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__block_header__free_unpacked
                     (Qrl__BlockHeader *message,
                      ProtobufCAllocator *allocator);
/* Qrl__BlockHeaderExtended methods */
void   qrl__block_header_extended__init
                     (Qrl__BlockHeaderExtended         *message);
size_t qrl__block_header_extended__get_packed_size
                     (const Qrl__BlockHeaderExtended   *message);
size_t qrl__block_header_extended__pack
                     (const Qrl__BlockHeaderExtended   *message,
                      uint8_t             *out);
size_t qrl__block_header_extended__pack_to_buffer
                     (const Qrl__BlockHeaderExtended   *message,
                      ProtobufCBuffer     *buffer);
Qrl__BlockHeaderExtended *
       qrl__block_header_extended__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__block_header_extended__free_unpacked
                     (Qrl__BlockHeaderExtended *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TransactionCount__CountEntry methods */
void   qrl__transaction_count__count_entry__init
                     (Qrl__TransactionCount__CountEntry         *message);
/* Qrl__TransactionCount methods */
void   qrl__transaction_count__init
                     (Qrl__TransactionCount         *message);
size_t qrl__transaction_count__get_packed_size
                     (const Qrl__TransactionCount   *message);
size_t qrl__transaction_count__pack
                     (const Qrl__TransactionCount   *message,
                      uint8_t             *out);
size_t qrl__transaction_count__pack_to_buffer
                     (const Qrl__TransactionCount   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TransactionCount *
       qrl__transaction_count__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__transaction_count__free_unpacked
                     (Qrl__TransactionCount *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TransactionExtended methods */
void   qrl__transaction_extended__init
                     (Qrl__TransactionExtended         *message);
size_t qrl__transaction_extended__get_packed_size
                     (const Qrl__TransactionExtended   *message);
size_t qrl__transaction_extended__pack
                     (const Qrl__TransactionExtended   *message,
                      uint8_t             *out);
size_t qrl__transaction_extended__pack_to_buffer
                     (const Qrl__TransactionExtended   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TransactionExtended *
       qrl__transaction_extended__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__transaction_extended__free_unpacked
                     (Qrl__TransactionExtended *message,
                      ProtobufCAllocator *allocator);
/* Qrl__BlockExtended methods */
void   qrl__block_extended__init
                     (Qrl__BlockExtended         *message);
size_t qrl__block_extended__get_packed_size
                     (const Qrl__BlockExtended   *message);
size_t qrl__block_extended__pack
                     (const Qrl__BlockExtended   *message,
                      uint8_t             *out);
size_t qrl__block_extended__pack_to_buffer
                     (const Qrl__BlockExtended   *message,
                      ProtobufCBuffer     *buffer);
Qrl__BlockExtended *
       qrl__block_extended__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__block_extended__free_unpacked
                     (Qrl__BlockExtended *message,
                      ProtobufCAllocator *allocator);
/* Qrl__Block methods */
void   qrl__block__init
                     (Qrl__Block         *message);
size_t qrl__block__get_packed_size
                     (const Qrl__Block   *message);
size_t qrl__block__pack
                     (const Qrl__Block   *message,
                      uint8_t             *out);
size_t qrl__block__pack_to_buffer
                     (const Qrl__Block   *message,
                      ProtobufCBuffer     *buffer);
Qrl__Block *
       qrl__block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__block__free_unpacked
                     (Qrl__Block *message,
                      ProtobufCAllocator *allocator);
/* Qrl__GenesisBalance methods */
void   qrl__genesis_balance__init
                     (Qrl__GenesisBalance         *message);
size_t qrl__genesis_balance__get_packed_size
                     (const Qrl__GenesisBalance   *message);
size_t qrl__genesis_balance__pack
                     (const Qrl__GenesisBalance   *message,
                      uint8_t             *out);
size_t qrl__genesis_balance__pack_to_buffer
                     (const Qrl__GenesisBalance   *message,
                      ProtobufCBuffer     *buffer);
Qrl__GenesisBalance *
       qrl__genesis_balance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__genesis_balance__free_unpacked
                     (Qrl__GenesisBalance *message,
                      ProtobufCAllocator *allocator);
/* Qrl__BlockMetaDataList methods */
void   qrl__block_meta_data_list__init
                     (Qrl__BlockMetaDataList         *message);
size_t qrl__block_meta_data_list__get_packed_size
                     (const Qrl__BlockMetaDataList   *message);
size_t qrl__block_meta_data_list__pack
                     (const Qrl__BlockMetaDataList   *message,
                      uint8_t             *out);
size_t qrl__block_meta_data_list__pack_to_buffer
                     (const Qrl__BlockMetaDataList   *message,
                      ProtobufCBuffer     *buffer);
Qrl__BlockMetaDataList *
       qrl__block_meta_data_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__block_meta_data_list__free_unpacked
                     (Qrl__BlockMetaDataList *message,
                      ProtobufCAllocator *allocator);
/* Qrl__Transaction__Transfer methods */
void   qrl__transaction__transfer__init
                     (Qrl__Transaction__Transfer         *message);
/* Qrl__Transaction__CoinBase methods */
void   qrl__transaction__coin_base__init
                     (Qrl__Transaction__CoinBase         *message);
/* Qrl__Transaction__LatticePublicKey methods */
void   qrl__transaction__lattice_public_key__init
                     (Qrl__Transaction__LatticePublicKey         *message);
/* Qrl__Transaction__Message methods */
void   qrl__transaction__message__init
                     (Qrl__Transaction__Message         *message);
/* Qrl__Transaction__Token methods */
void   qrl__transaction__token__init
                     (Qrl__Transaction__Token         *message);
/* Qrl__Transaction__TransferToken methods */
void   qrl__transaction__transfer_token__init
                     (Qrl__Transaction__TransferToken         *message);
/* Qrl__Transaction__Slave methods */
void   qrl__transaction__slave__init
                     (Qrl__Transaction__Slave         *message);
/* Qrl__Transaction__MultiSigCreate methods */
void   qrl__transaction__multi_sig_create__init
                     (Qrl__Transaction__MultiSigCreate         *message);
/* Qrl__Transaction__MultiSigSpend methods */
void   qrl__transaction__multi_sig_spend__init
                     (Qrl__Transaction__MultiSigSpend         *message);
/* Qrl__Transaction__MultiSigVote methods */
void   qrl__transaction__multi_sig_vote__init
                     (Qrl__Transaction__MultiSigVote         *message);
/* Qrl__Transaction__ProposalCreate__QIP methods */
void   qrl__transaction__proposal_create__qip__init
                     (Qrl__Transaction__ProposalCreate__QIP         *message);
/* Qrl__Transaction__ProposalCreate__Config methods */
void   qrl__transaction__proposal_create__config__init
                     (Qrl__Transaction__ProposalCreate__Config         *message);
/* Qrl__Transaction__ProposalCreate__Other methods */
void   qrl__transaction__proposal_create__other__init
                     (Qrl__Transaction__ProposalCreate__Other         *message);
/* Qrl__Transaction__ProposalCreate methods */
void   qrl__transaction__proposal_create__init
                     (Qrl__Transaction__ProposalCreate         *message);
/* Qrl__Transaction__ProposalVote methods */
void   qrl__transaction__proposal_vote__init
                     (Qrl__Transaction__ProposalVote         *message);
/* Qrl__Transaction methods */
void   qrl__transaction__init
                     (Qrl__Transaction         *message);
size_t qrl__transaction__get_packed_size
                     (const Qrl__Transaction   *message);
size_t qrl__transaction__pack
                     (const Qrl__Transaction   *message,
                      uint8_t             *out);
size_t qrl__transaction__pack_to_buffer
                     (const Qrl__Transaction   *message,
                      ProtobufCBuffer     *buffer);
Qrl__Transaction *
       qrl__transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__transaction__free_unpacked
                     (Qrl__Transaction *message,
                      ProtobufCAllocator *allocator);
/* Qrl__VoteStats methods */
void   qrl__vote_stats__init
                     (Qrl__VoteStats         *message);
size_t qrl__vote_stats__get_packed_size
                     (const Qrl__VoteStats   *message);
size_t qrl__vote_stats__pack
                     (const Qrl__VoteStats   *message,
                      uint8_t             *out);
size_t qrl__vote_stats__pack_to_buffer
                     (const Qrl__VoteStats   *message,
                      ProtobufCBuffer     *buffer);
Qrl__VoteStats *
       qrl__vote_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__vote_stats__free_unpacked
                     (Qrl__VoteStats *message,
                      ProtobufCAllocator *allocator);
/* Qrl__ProposalVoteStats methods */
void   qrl__proposal_vote_stats__init
                     (Qrl__ProposalVoteStats         *message);
size_t qrl__proposal_vote_stats__get_packed_size
                     (const Qrl__ProposalVoteStats   *message);
size_t qrl__proposal_vote_stats__pack
                     (const Qrl__ProposalVoteStats   *message,
                      uint8_t             *out);
size_t qrl__proposal_vote_stats__pack_to_buffer
                     (const Qrl__ProposalVoteStats   *message,
                      ProtobufCBuffer     *buffer);
Qrl__ProposalVoteStats *
       qrl__proposal_vote_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__proposal_vote_stats__free_unpacked
                     (Qrl__ProposalVoteStats *message,
                      ProtobufCAllocator *allocator);
/* Qrl__ProposalRecord methods */
void   qrl__proposal_record__init
                     (Qrl__ProposalRecord         *message);
size_t qrl__proposal_record__get_packed_size
                     (const Qrl__ProposalRecord   *message);
size_t qrl__proposal_record__pack
                     (const Qrl__ProposalRecord   *message,
                      uint8_t             *out);
size_t qrl__proposal_record__pack_to_buffer
                     (const Qrl__ProposalRecord   *message,
                      ProtobufCBuffer     *buffer);
Qrl__ProposalRecord *
       qrl__proposal_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__proposal_record__free_unpacked
                     (Qrl__ProposalRecord *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TokenList methods */
void   qrl__token_list__init
                     (Qrl__TokenList         *message);
size_t qrl__token_list__get_packed_size
                     (const Qrl__TokenList   *message);
size_t qrl__token_list__pack
                     (const Qrl__TokenList   *message,
                      uint8_t             *out);
size_t qrl__token_list__pack_to_buffer
                     (const Qrl__TokenList   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TokenList *
       qrl__token_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__token_list__free_unpacked
                     (Qrl__TokenList *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TokenBalance methods */
void   qrl__token_balance__init
                     (Qrl__TokenBalance         *message);
size_t qrl__token_balance__get_packed_size
                     (const Qrl__TokenBalance   *message);
size_t qrl__token_balance__pack
                     (const Qrl__TokenBalance   *message,
                      uint8_t             *out);
size_t qrl__token_balance__pack_to_buffer
                     (const Qrl__TokenBalance   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TokenBalance *
       qrl__token_balance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__token_balance__free_unpacked
                     (Qrl__TokenBalance *message,
                      ProtobufCAllocator *allocator);
/* Qrl__SlaveMetadata methods */
void   qrl__slave_metadata__init
                     (Qrl__SlaveMetadata         *message);
size_t qrl__slave_metadata__get_packed_size
                     (const Qrl__SlaveMetadata   *message);
size_t qrl__slave_metadata__pack
                     (const Qrl__SlaveMetadata   *message,
                      uint8_t             *out);
size_t qrl__slave_metadata__pack_to_buffer
                     (const Qrl__SlaveMetadata   *message,
                      ProtobufCBuffer     *buffer);
Qrl__SlaveMetadata *
       qrl__slave_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__slave_metadata__free_unpacked
                     (Qrl__SlaveMetadata *message,
                      ProtobufCAllocator *allocator);
/* Qrl__LatticePKMetadata methods */
void   qrl__lattice_pkmetadata__init
                     (Qrl__LatticePKMetadata         *message);
size_t qrl__lattice_pkmetadata__get_packed_size
                     (const Qrl__LatticePKMetadata   *message);
size_t qrl__lattice_pkmetadata__pack
                     (const Qrl__LatticePKMetadata   *message,
                      uint8_t             *out);
size_t qrl__lattice_pkmetadata__pack_to_buffer
                     (const Qrl__LatticePKMetadata   *message,
                      ProtobufCBuffer     *buffer);
Qrl__LatticePKMetadata *
       qrl__lattice_pkmetadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__lattice_pkmetadata__free_unpacked
                     (Qrl__LatticePKMetadata *message,
                      ProtobufCAllocator *allocator);
/* Qrl__TokenMetadata methods */
void   qrl__token_metadata__init
                     (Qrl__TokenMetadata         *message);
size_t qrl__token_metadata__get_packed_size
                     (const Qrl__TokenMetadata   *message);
size_t qrl__token_metadata__pack
                     (const Qrl__TokenMetadata   *message,
                      uint8_t             *out);
size_t qrl__token_metadata__pack_to_buffer
                     (const Qrl__TokenMetadata   *message,
                      ProtobufCBuffer     *buffer);
Qrl__TokenMetadata *
       qrl__token_metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__token_metadata__free_unpacked
                     (Qrl__TokenMetadata *message,
                      ProtobufCAllocator *allocator);
/* Qrl__EncryptedEphemeralMessage__Channel methods */
void   qrl__encrypted_ephemeral_message__channel__init
                     (Qrl__EncryptedEphemeralMessage__Channel         *message);
/* Qrl__EncryptedEphemeralMessage methods */
void   qrl__encrypted_ephemeral_message__init
                     (Qrl__EncryptedEphemeralMessage         *message);
size_t qrl__encrypted_ephemeral_message__get_packed_size
                     (const Qrl__EncryptedEphemeralMessage   *message);
size_t qrl__encrypted_ephemeral_message__pack
                     (const Qrl__EncryptedEphemeralMessage   *message,
                      uint8_t             *out);
size_t qrl__encrypted_ephemeral_message__pack_to_buffer
                     (const Qrl__EncryptedEphemeralMessage   *message,
                      ProtobufCBuffer     *buffer);
Qrl__EncryptedEphemeralMessage *
       qrl__encrypted_ephemeral_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__encrypted_ephemeral_message__free_unpacked
                     (Qrl__EncryptedEphemeralMessage *message,
                      ProtobufCAllocator *allocator);
/* Qrl__AddressList methods */
void   qrl__address_list__init
                     (Qrl__AddressList         *message);
size_t qrl__address_list__get_packed_size
                     (const Qrl__AddressList   *message);
size_t qrl__address_list__pack
                     (const Qrl__AddressList   *message,
                      uint8_t             *out);
size_t qrl__address_list__pack_to_buffer
                     (const Qrl__AddressList   *message,
                      ProtobufCBuffer     *buffer);
Qrl__AddressList *
       qrl__address_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__address_list__free_unpacked
                     (Qrl__AddressList *message,
                      ProtobufCAllocator *allocator);
/* Qrl__BlockHeightData methods */
void   qrl__block_height_data__init
                     (Qrl__BlockHeightData         *message);
size_t qrl__block_height_data__get_packed_size
                     (const Qrl__BlockHeightData   *message);
size_t qrl__block_height_data__pack
                     (const Qrl__BlockHeightData   *message,
                      uint8_t             *out);
size_t qrl__block_height_data__pack_to_buffer
                     (const Qrl__BlockHeightData   *message,
                      ProtobufCBuffer     *buffer);
Qrl__BlockHeightData *
       qrl__block_height_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__block_height_data__free_unpacked
                     (Qrl__BlockHeightData *message,
                      ProtobufCAllocator *allocator);
/* Qrl__BlockMetaData methods */
void   qrl__block_meta_data__init
                     (Qrl__BlockMetaData         *message);
size_t qrl__block_meta_data__get_packed_size
                     (const Qrl__BlockMetaData   *message);
size_t qrl__block_meta_data__pack
                     (const Qrl__BlockMetaData   *message,
                      uint8_t             *out);
size_t qrl__block_meta_data__pack_to_buffer
                     (const Qrl__BlockMetaData   *message,
                      ProtobufCBuffer     *buffer);
Qrl__BlockMetaData *
       qrl__block_meta_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__block_meta_data__free_unpacked
                     (Qrl__BlockMetaData *message,
                      ProtobufCAllocator *allocator);
/* Qrl__BlockNumberMapping methods */
void   qrl__block_number_mapping__init
                     (Qrl__BlockNumberMapping         *message);
size_t qrl__block_number_mapping__get_packed_size
                     (const Qrl__BlockNumberMapping   *message);
size_t qrl__block_number_mapping__pack
                     (const Qrl__BlockNumberMapping   *message,
                      uint8_t             *out);
size_t qrl__block_number_mapping__pack_to_buffer
                     (const Qrl__BlockNumberMapping   *message,
                      ProtobufCBuffer     *buffer);
Qrl__BlockNumberMapping *
       qrl__block_number_mapping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__block_number_mapping__free_unpacked
                     (Qrl__BlockNumberMapping *message,
                      ProtobufCAllocator *allocator);
/* Qrl__PeerStat methods */
void   qrl__peer_stat__init
                     (Qrl__PeerStat         *message);
size_t qrl__peer_stat__get_packed_size
                     (const Qrl__PeerStat   *message);
size_t qrl__peer_stat__pack
                     (const Qrl__PeerStat   *message,
                      uint8_t             *out);
size_t qrl__peer_stat__pack_to_buffer
                     (const Qrl__PeerStat   *message,
                      ProtobufCBuffer     *buffer);
Qrl__PeerStat *
       qrl__peer_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__peer_stat__free_unpacked
                     (Qrl__PeerStat *message,
                      ProtobufCAllocator *allocator);
/* Qrl__NodeChainState methods */
void   qrl__node_chain_state__init
                     (Qrl__NodeChainState         *message);
size_t qrl__node_chain_state__get_packed_size
                     (const Qrl__NodeChainState   *message);
size_t qrl__node_chain_state__pack
                     (const Qrl__NodeChainState   *message,
                      uint8_t             *out);
size_t qrl__node_chain_state__pack_to_buffer
                     (const Qrl__NodeChainState   *message,
                      ProtobufCBuffer     *buffer);
Qrl__NodeChainState *
       qrl__node_chain_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__node_chain_state__free_unpacked
                     (Qrl__NodeChainState *message,
                      ProtobufCAllocator *allocator);
/* Qrl__NodeHeaderHash methods */
void   qrl__node_header_hash__init
                     (Qrl__NodeHeaderHash         *message);
size_t qrl__node_header_hash__get_packed_size
                     (const Qrl__NodeHeaderHash   *message);
size_t qrl__node_header_hash__pack
                     (const Qrl__NodeHeaderHash   *message,
                      uint8_t             *out);
size_t qrl__node_header_hash__pack_to_buffer
                     (const Qrl__NodeHeaderHash   *message,
                      ProtobufCBuffer     *buffer);
Qrl__NodeHeaderHash *
       qrl__node_header_hash__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__node_header_hash__free_unpacked
                     (Qrl__NodeHeaderHash *message,
                      ProtobufCAllocator *allocator);
/* Qrl__P2PAcknowledgement methods */
void   qrl__p2_packnowledgement__init
                     (Qrl__P2PAcknowledgement         *message);
size_t qrl__p2_packnowledgement__get_packed_size
                     (const Qrl__P2PAcknowledgement   *message);
size_t qrl__p2_packnowledgement__pack
                     (const Qrl__P2PAcknowledgement   *message,
                      uint8_t             *out);
size_t qrl__p2_packnowledgement__pack_to_buffer
                     (const Qrl__P2PAcknowledgement   *message,
                      ProtobufCBuffer     *buffer);
Qrl__P2PAcknowledgement *
       qrl__p2_packnowledgement__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__p2_packnowledgement__free_unpacked
                     (Qrl__P2PAcknowledgement *message,
                      ProtobufCAllocator *allocator);
/* Qrl__PeerInfo methods */
void   qrl__peer_info__init
                     (Qrl__PeerInfo         *message);
size_t qrl__peer_info__get_packed_size
                     (const Qrl__PeerInfo   *message);
size_t qrl__peer_info__pack
                     (const Qrl__PeerInfo   *message,
                      uint8_t             *out);
size_t qrl__peer_info__pack_to_buffer
                     (const Qrl__PeerInfo   *message,
                      ProtobufCBuffer     *buffer);
Qrl__PeerInfo *
       qrl__peer_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__peer_info__free_unpacked
                     (Qrl__PeerInfo *message,
                      ProtobufCAllocator *allocator);
/* Qrl__Peers methods */
void   qrl__peers__init
                     (Qrl__Peers         *message);
size_t qrl__peers__get_packed_size
                     (const Qrl__Peers   *message);
size_t qrl__peers__pack
                     (const Qrl__Peers   *message,
                      uint8_t             *out);
size_t qrl__peers__pack_to_buffer
                     (const Qrl__Peers   *message,
                      ProtobufCBuffer     *buffer);
Qrl__Peers *
       qrl__peers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__peers__free_unpacked
                     (Qrl__Peers *message,
                      ProtobufCAllocator *allocator);
/* Qrl__DevConfig__Chain methods */
void   qrl__dev_config__chain__init
                     (Qrl__DevConfig__Chain         *message);
/* Qrl__DevConfig__Block__BlockSizeController methods */
void   qrl__dev_config__block__block_size_controller__init
                     (Qrl__DevConfig__Block__BlockSizeController         *message);
/* Qrl__DevConfig__Block methods */
void   qrl__dev_config__block__init
                     (Qrl__DevConfig__Block         *message);
/* Qrl__DevConfig__Transaction__Message methods */
void   qrl__dev_config__transaction__message__init
                     (Qrl__DevConfig__Transaction__Message         *message);
/* Qrl__DevConfig__Transaction__Slave methods */
void   qrl__dev_config__transaction__slave__init
                     (Qrl__DevConfig__Transaction__Slave         *message);
/* Qrl__DevConfig__Transaction__Token methods */
void   qrl__dev_config__transaction__token__init
                     (Qrl__DevConfig__Transaction__Token         *message);
/* Qrl__DevConfig__Transaction__Lattice methods */
void   qrl__dev_config__transaction__lattice__init
                     (Qrl__DevConfig__Transaction__Lattice         *message);
/* Qrl__DevConfig__Transaction__FoundationMultiSig methods */
void   qrl__dev_config__transaction__foundation_multi_sig__init
                     (Qrl__DevConfig__Transaction__FoundationMultiSig         *message);
/* Qrl__DevConfig__Transaction__Proposal methods */
void   qrl__dev_config__transaction__proposal__init
                     (Qrl__DevConfig__Transaction__Proposal         *message);
/* Qrl__DevConfig__Transaction methods */
void   qrl__dev_config__transaction__init
                     (Qrl__DevConfig__Transaction         *message);
/* Qrl__DevConfig__POW methods */
void   qrl__dev_config__pow__init
                     (Qrl__DevConfig__POW         *message);
/* Qrl__DevConfig methods */
void   qrl__dev_config__init
                     (Qrl__DevConfig         *message);
size_t qrl__dev_config__get_packed_size
                     (const Qrl__DevConfig   *message);
size_t qrl__dev_config__pack
                     (const Qrl__DevConfig   *message,
                      uint8_t             *out);
size_t qrl__dev_config__pack_to_buffer
                     (const Qrl__DevConfig   *message,
                      ProtobufCBuffer     *buffer);
Qrl__DevConfig *
       qrl__dev_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   qrl__dev_config__free_unpacked
                     (Qrl__DevConfig *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Qrl__Empty_Closure)
                 (const Qrl__Empty *message,
                  void *closure_data);
typedef void (*Qrl__GetNodeStateReq_Closure)
                 (const Qrl__GetNodeStateReq *message,
                  void *closure_data);
typedef void (*Qrl__GetNodeStateResp_Closure)
                 (const Qrl__GetNodeStateResp *message,
                  void *closure_data);
typedef void (*Qrl__GetKnownPeersReq_Closure)
                 (const Qrl__GetKnownPeersReq *message,
                  void *closure_data);
typedef void (*Qrl__GetKnownPeersResp_Closure)
                 (const Qrl__GetKnownPeersResp *message,
                  void *closure_data);
typedef void (*Qrl__GetPeersStatReq_Closure)
                 (const Qrl__GetPeersStatReq *message,
                  void *closure_data);
typedef void (*Qrl__GetPeersStatResp_Closure)
                 (const Qrl__GetPeersStatResp *message,
                  void *closure_data);
typedef void (*Qrl__GetChainStatsReq_Closure)
                 (const Qrl__GetChainStatsReq *message,
                  void *closure_data);
typedef void (*Qrl__GetChainStatsResp_Closure)
                 (const Qrl__GetChainStatsResp *message,
                  void *closure_data);
typedef void (*Qrl__GetStatsReq_Closure)
                 (const Qrl__GetStatsReq *message,
                  void *closure_data);
typedef void (*Qrl__GetStatsResp_Closure)
                 (const Qrl__GetStatsResp *message,
                  void *closure_data);
typedef void (*Qrl__GetAddressFromPKReq_Closure)
                 (const Qrl__GetAddressFromPKReq *message,
                  void *closure_data);
typedef void (*Qrl__GetAddressFromPKResp_Closure)
                 (const Qrl__GetAddressFromPKResp *message,
                  void *closure_data);
typedef void (*Qrl__BlockDataPoint_Closure)
                 (const Qrl__BlockDataPoint *message,
                  void *closure_data);
typedef void (*Qrl__GetAddressStateReq_Closure)
                 (const Qrl__GetAddressStateReq *message,
                  void *closure_data);
typedef void (*Qrl__GetAddressStateResp_Closure)
                 (const Qrl__GetAddressStateResp *message,
                  void *closure_data);
typedef void (*Qrl__GetOptimizedAddressStateResp_Closure)
                 (const Qrl__GetOptimizedAddressStateResp *message,
                  void *closure_data);
typedef void (*Qrl__GetMultiSigAddressStateReq_Closure)
                 (const Qrl__GetMultiSigAddressStateReq *message,
                  void *closure_data);
typedef void (*Qrl__GetMultiSigAddressStateResp_Closure)
                 (const Qrl__GetMultiSigAddressStateResp *message,
                  void *closure_data);
typedef void (*Qrl__IsSlaveReq_Closure)
                 (const Qrl__IsSlaveReq *message,
                  void *closure_data);
typedef void (*Qrl__IsSlaveResp_Closure)
                 (const Qrl__IsSlaveResp *message,
                  void *closure_data);
typedef void (*Qrl__ParseAddressReq_Closure)
                 (const Qrl__ParseAddressReq *message,
                  void *closure_data);
typedef void (*Qrl__ParseAddressResp_Closure)
                 (const Qrl__ParseAddressResp *message,
                  void *closure_data);
typedef void (*Qrl__GetObjectReq_Closure)
                 (const Qrl__GetObjectReq *message,
                  void *closure_data);
typedef void (*Qrl__GetObjectResp_Closure)
                 (const Qrl__GetObjectResp *message,
                  void *closure_data);
typedef void (*Qrl__GetLatestDataReq_Closure)
                 (const Qrl__GetLatestDataReq *message,
                  void *closure_data);
typedef void (*Qrl__GetLatestDataResp_Closure)
                 (const Qrl__GetLatestDataResp *message,
                  void *closure_data);
typedef void (*Qrl__TransferCoinsReq_Closure)
                 (const Qrl__TransferCoinsReq *message,
                  void *closure_data);
typedef void (*Qrl__TransferCoinsResp_Closure)
                 (const Qrl__TransferCoinsResp *message,
                  void *closure_data);
typedef void (*Qrl__PushTransactionReq_Closure)
                 (const Qrl__PushTransactionReq *message,
                  void *closure_data);
typedef void (*Qrl__PushTransactionResp_Closure)
                 (const Qrl__PushTransactionResp *message,
                  void *closure_data);
typedef void (*Qrl__MultiSigCreateTxnReq_Closure)
                 (const Qrl__MultiSigCreateTxnReq *message,
                  void *closure_data);
typedef void (*Qrl__MultiSigSpendTxnReq_Closure)
                 (const Qrl__MultiSigSpendTxnReq *message,
                  void *closure_data);
typedef void (*Qrl__MultiSigVoteTxnReq_Closure)
                 (const Qrl__MultiSigVoteTxnReq *message,
                  void *closure_data);
typedef void (*Qrl__MessageTxnReq_Closure)
                 (const Qrl__MessageTxnReq *message,
                  void *closure_data);
typedef void (*Qrl__TokenTxnReq_Closure)
                 (const Qrl__TokenTxnReq *message,
                  void *closure_data);
typedef void (*Qrl__TransferTokenTxnReq_Closure)
                 (const Qrl__TransferTokenTxnReq *message,
                  void *closure_data);
typedef void (*Qrl__SlaveTxnReq_Closure)
                 (const Qrl__SlaveTxnReq *message,
                  void *closure_data);
typedef void (*Qrl__LatticeTxnReq_Closure)
                 (const Qrl__LatticeTxnReq *message,
                  void *closure_data);
typedef void (*Qrl__MiniTransaction_Closure)
                 (const Qrl__MiniTransaction *message,
                  void *closure_data);
typedef void (*Qrl__GetTransactionReq_Closure)
                 (const Qrl__GetTransactionReq *message,
                  void *closure_data);
typedef void (*Qrl__GetTransactionResp_Closure)
                 (const Qrl__GetTransactionResp *message,
                  void *closure_data);
typedef void (*Qrl__GetMiniTransactionsByAddressReq_Closure)
                 (const Qrl__GetMiniTransactionsByAddressReq *message,
                  void *closure_data);
typedef void (*Qrl__GetMiniTransactionsByAddressResp_Closure)
                 (const Qrl__GetMiniTransactionsByAddressResp *message,
                  void *closure_data);
typedef void (*Qrl__GetTransactionsByAddressReq_Closure)
                 (const Qrl__GetTransactionsByAddressReq *message,
                  void *closure_data);
typedef void (*Qrl__GetTransactionsByAddressResp_Closure)
                 (const Qrl__GetTransactionsByAddressResp *message,
                  void *closure_data);
typedef void (*Qrl__GetMultiSigSpendTxsByAddressReq_Closure)
                 (const Qrl__GetMultiSigSpendTxsByAddressReq *message,
                  void *closure_data);
typedef void (*Qrl__GetMultiSigSpendTxsByAddressResp_Closure)
                 (const Qrl__GetMultiSigSpendTxsByAddressResp *message,
                  void *closure_data);
typedef void (*Qrl__GetVoteStatsReq_Closure)
                 (const Qrl__GetVoteStatsReq *message,
                  void *closure_data);
typedef void (*Qrl__GetVoteStatsResp_Closure)
                 (const Qrl__GetVoteStatsResp *message,
                  void *closure_data);
typedef void (*Qrl__GetInboxMessagesByAddressResp_Closure)
                 (const Qrl__GetInboxMessagesByAddressResp *message,
                  void *closure_data);
typedef void (*Qrl__InboxMessage_Closure)
                 (const Qrl__InboxMessage *message,
                  void *closure_data);
typedef void (*Qrl__TokenDetail_Closure)
                 (const Qrl__TokenDetail *message,
                  void *closure_data);
typedef void (*Qrl__GetTokensByAddressResp_Closure)
                 (const Qrl__GetTokensByAddressResp *message,
                  void *closure_data);
typedef void (*Qrl__SlaveDetail_Closure)
                 (const Qrl__SlaveDetail *message,
                  void *closure_data);
typedef void (*Qrl__GetSlavesByAddressResp_Closure)
                 (const Qrl__GetSlavesByAddressResp *message,
                  void *closure_data);
typedef void (*Qrl__LatticePKsDetail_Closure)
                 (const Qrl__LatticePKsDetail *message,
                  void *closure_data);
typedef void (*Qrl__GetLatticePKsByAddressResp_Closure)
                 (const Qrl__GetLatticePKsByAddressResp *message,
                  void *closure_data);
typedef void (*Qrl__MultiSigDetail_Closure)
                 (const Qrl__MultiSigDetail *message,
                  void *closure_data);
typedef void (*Qrl__GetMultiSigAddressesByAddressResp_Closure)
                 (const Qrl__GetMultiSigAddressesByAddressResp *message,
                  void *closure_data);
typedef void (*Qrl__GetBalanceReq_Closure)
                 (const Qrl__GetBalanceReq *message,
                  void *closure_data);
typedef void (*Qrl__GetBalanceResp_Closure)
                 (const Qrl__GetBalanceResp *message,
                  void *closure_data);
typedef void (*Qrl__GetTotalBalanceReq_Closure)
                 (const Qrl__GetTotalBalanceReq *message,
                  void *closure_data);
typedef void (*Qrl__GetTotalBalanceResp_Closure)
                 (const Qrl__GetTotalBalanceResp *message,
                  void *closure_data);
typedef void (*Qrl__GetOTSReq_Closure)
                 (const Qrl__GetOTSReq *message,
                  void *closure_data);
typedef void (*Qrl__OTSBitfieldByPage_Closure)
                 (const Qrl__OTSBitfieldByPage *message,
                  void *closure_data);
typedef void (*Qrl__GetOTSResp_Closure)
                 (const Qrl__GetOTSResp *message,
                  void *closure_data);
typedef void (*Qrl__GetHeightReq_Closure)
                 (const Qrl__GetHeightReq *message,
                  void *closure_data);
typedef void (*Qrl__GetHeightResp_Closure)
                 (const Qrl__GetHeightResp *message,
                  void *closure_data);
typedef void (*Qrl__GetBlockReq_Closure)
                 (const Qrl__GetBlockReq *message,
                  void *closure_data);
typedef void (*Qrl__GetBlockResp_Closure)
                 (const Qrl__GetBlockResp *message,
                  void *closure_data);
typedef void (*Qrl__GetBlockByNumberReq_Closure)
                 (const Qrl__GetBlockByNumberReq *message,
                  void *closure_data);
typedef void (*Qrl__GetBlockByNumberResp_Closure)
                 (const Qrl__GetBlockByNumberResp *message,
                  void *closure_data);
typedef void (*Qrl__GetLocalAddressesReq_Closure)
                 (const Qrl__GetLocalAddressesReq *message,
                  void *closure_data);
typedef void (*Qrl__GetLocalAddressesResp_Closure)
                 (const Qrl__GetLocalAddressesResp *message,
                  void *closure_data);
typedef void (*Qrl__NodeInfo_Closure)
                 (const Qrl__NodeInfo *message,
                  void *closure_data);
typedef void (*Qrl__AddressDescriptor_Closure)
                 (const Qrl__AddressDescriptor *message,
                  void *closure_data);
typedef void (*Qrl__StoredPeers_Closure)
                 (const Qrl__StoredPeers *message,
                  void *closure_data);
typedef void (*Qrl__Peer_Closure)
                 (const Qrl__Peer *message,
                  void *closure_data);
typedef void (*Qrl__AddressState__TokensEntry_Closure)
                 (const Qrl__AddressState__TokensEntry *message,
                  void *closure_data);
typedef void (*Qrl__AddressState__SlavePksAccessTypeEntry_Closure)
                 (const Qrl__AddressState__SlavePksAccessTypeEntry *message,
                  void *closure_data);
typedef void (*Qrl__AddressState_Closure)
                 (const Qrl__AddressState *message,
                  void *closure_data);
typedef void (*Qrl__OptimizedAddressState_Closure)
                 (const Qrl__OptimizedAddressState *message,
                  void *closure_data);
typedef void (*Qrl__MultiSigAddressState_Closure)
                 (const Qrl__MultiSigAddressState *message,
                  void *closure_data);
typedef void (*Qrl__MultiSigAddressesList_Closure)
                 (const Qrl__MultiSigAddressesList *message,
                  void *closure_data);
typedef void (*Qrl__DataList_Closure)
                 (const Qrl__DataList *message,
                  void *closure_data);
typedef void (*Qrl__Bitfield_Closure)
                 (const Qrl__Bitfield *message,
                  void *closure_data);
typedef void (*Qrl__TransactionHashList_Closure)
                 (const Qrl__TransactionHashList *message,
                  void *closure_data);
typedef void (*Qrl__LatticePK_Closure)
                 (const Qrl__LatticePK *message,
                  void *closure_data);
typedef void (*Qrl__AddressAmount_Closure)
                 (const Qrl__AddressAmount *message,
                  void *closure_data);
typedef void (*Qrl__BlockHeader_Closure)
                 (const Qrl__BlockHeader *message,
                  void *closure_data);
typedef void (*Qrl__BlockHeaderExtended_Closure)
                 (const Qrl__BlockHeaderExtended *message,
                  void *closure_data);
typedef void (*Qrl__TransactionCount__CountEntry_Closure)
                 (const Qrl__TransactionCount__CountEntry *message,
                  void *closure_data);
typedef void (*Qrl__TransactionCount_Closure)
                 (const Qrl__TransactionCount *message,
                  void *closure_data);
typedef void (*Qrl__TransactionExtended_Closure)
                 (const Qrl__TransactionExtended *message,
                  void *closure_data);
typedef void (*Qrl__BlockExtended_Closure)
                 (const Qrl__BlockExtended *message,
                  void *closure_data);
typedef void (*Qrl__Block_Closure)
                 (const Qrl__Block *message,
                  void *closure_data);
typedef void (*Qrl__GenesisBalance_Closure)
                 (const Qrl__GenesisBalance *message,
                  void *closure_data);
typedef void (*Qrl__BlockMetaDataList_Closure)
                 (const Qrl__BlockMetaDataList *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__Transfer_Closure)
                 (const Qrl__Transaction__Transfer *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__CoinBase_Closure)
                 (const Qrl__Transaction__CoinBase *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__LatticePublicKey_Closure)
                 (const Qrl__Transaction__LatticePublicKey *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__Message_Closure)
                 (const Qrl__Transaction__Message *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__Token_Closure)
                 (const Qrl__Transaction__Token *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__TransferToken_Closure)
                 (const Qrl__Transaction__TransferToken *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__Slave_Closure)
                 (const Qrl__Transaction__Slave *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__MultiSigCreate_Closure)
                 (const Qrl__Transaction__MultiSigCreate *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__MultiSigSpend_Closure)
                 (const Qrl__Transaction__MultiSigSpend *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__MultiSigVote_Closure)
                 (const Qrl__Transaction__MultiSigVote *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__ProposalCreate__QIP_Closure)
                 (const Qrl__Transaction__ProposalCreate__QIP *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__ProposalCreate__Config_Closure)
                 (const Qrl__Transaction__ProposalCreate__Config *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__ProposalCreate__Other_Closure)
                 (const Qrl__Transaction__ProposalCreate__Other *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__ProposalCreate_Closure)
                 (const Qrl__Transaction__ProposalCreate *message,
                  void *closure_data);
typedef void (*Qrl__Transaction__ProposalVote_Closure)
                 (const Qrl__Transaction__ProposalVote *message,
                  void *closure_data);
typedef void (*Qrl__Transaction_Closure)
                 (const Qrl__Transaction *message,
                  void *closure_data);
typedef void (*Qrl__VoteStats_Closure)
                 (const Qrl__VoteStats *message,
                  void *closure_data);
typedef void (*Qrl__ProposalVoteStats_Closure)
                 (const Qrl__ProposalVoteStats *message,
                  void *closure_data);
typedef void (*Qrl__ProposalRecord_Closure)
                 (const Qrl__ProposalRecord *message,
                  void *closure_data);
typedef void (*Qrl__TokenList_Closure)
                 (const Qrl__TokenList *message,
                  void *closure_data);
typedef void (*Qrl__TokenBalance_Closure)
                 (const Qrl__TokenBalance *message,
                  void *closure_data);
typedef void (*Qrl__SlaveMetadata_Closure)
                 (const Qrl__SlaveMetadata *message,
                  void *closure_data);
typedef void (*Qrl__LatticePKMetadata_Closure)
                 (const Qrl__LatticePKMetadata *message,
                  void *closure_data);
typedef void (*Qrl__TokenMetadata_Closure)
                 (const Qrl__TokenMetadata *message,
                  void *closure_data);
typedef void (*Qrl__EncryptedEphemeralMessage__Channel_Closure)
                 (const Qrl__EncryptedEphemeralMessage__Channel *message,
                  void *closure_data);
typedef void (*Qrl__EncryptedEphemeralMessage_Closure)
                 (const Qrl__EncryptedEphemeralMessage *message,
                  void *closure_data);
typedef void (*Qrl__AddressList_Closure)
                 (const Qrl__AddressList *message,
                  void *closure_data);
typedef void (*Qrl__BlockHeightData_Closure)
                 (const Qrl__BlockHeightData *message,
                  void *closure_data);
typedef void (*Qrl__BlockMetaData_Closure)
                 (const Qrl__BlockMetaData *message,
                  void *closure_data);
typedef void (*Qrl__BlockNumberMapping_Closure)
                 (const Qrl__BlockNumberMapping *message,
                  void *closure_data);
typedef void (*Qrl__PeerStat_Closure)
                 (const Qrl__PeerStat *message,
                  void *closure_data);
typedef void (*Qrl__NodeChainState_Closure)
                 (const Qrl__NodeChainState *message,
                  void *closure_data);
typedef void (*Qrl__NodeHeaderHash_Closure)
                 (const Qrl__NodeHeaderHash *message,
                  void *closure_data);
typedef void (*Qrl__P2PAcknowledgement_Closure)
                 (const Qrl__P2PAcknowledgement *message,
                  void *closure_data);
typedef void (*Qrl__PeerInfo_Closure)
                 (const Qrl__PeerInfo *message,
                  void *closure_data);
typedef void (*Qrl__Peers_Closure)
                 (const Qrl__Peers *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Chain_Closure)
                 (const Qrl__DevConfig__Chain *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Block__BlockSizeController_Closure)
                 (const Qrl__DevConfig__Block__BlockSizeController *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Block_Closure)
                 (const Qrl__DevConfig__Block *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Transaction__Message_Closure)
                 (const Qrl__DevConfig__Transaction__Message *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Transaction__Slave_Closure)
                 (const Qrl__DevConfig__Transaction__Slave *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Transaction__Token_Closure)
                 (const Qrl__DevConfig__Transaction__Token *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Transaction__Lattice_Closure)
                 (const Qrl__DevConfig__Transaction__Lattice *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Transaction__FoundationMultiSig_Closure)
                 (const Qrl__DevConfig__Transaction__FoundationMultiSig *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Transaction__Proposal_Closure)
                 (const Qrl__DevConfig__Transaction__Proposal *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__Transaction_Closure)
                 (const Qrl__DevConfig__Transaction *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig__POW_Closure)
                 (const Qrl__DevConfig__POW *message,
                  void *closure_data);
typedef void (*Qrl__DevConfig_Closure)
                 (const Qrl__DevConfig *message,
                  void *closure_data);

/* --- services --- */

typedef struct Qrl__PublicAPI_Service Qrl__PublicAPI_Service;
struct Qrl__PublicAPI_Service
{
  ProtobufCService base;
  void (*get_node_state)(Qrl__PublicAPI_Service *service,
                         const Qrl__GetNodeStateReq *input,
                         Qrl__GetNodeStateResp_Closure closure,
                         void *closure_data);
  void (*get_known_peers)(Qrl__PublicAPI_Service *service,
                          const Qrl__GetKnownPeersReq *input,
                          Qrl__GetKnownPeersResp_Closure closure,
                          void *closure_data);
  void (*get_peers_stat)(Qrl__PublicAPI_Service *service,
                         const Qrl__GetPeersStatReq *input,
                         Qrl__GetPeersStatResp_Closure closure,
                         void *closure_data);
  void (*get_stats)(Qrl__PublicAPI_Service *service,
                    const Qrl__GetStatsReq *input,
                    Qrl__GetStatsResp_Closure closure,
                    void *closure_data);
  void (*get_address_state)(Qrl__PublicAPI_Service *service,
                            const Qrl__GetAddressStateReq *input,
                            Qrl__GetAddressStateResp_Closure closure,
                            void *closure_data);
  void (*get_optimized_address_state)(Qrl__PublicAPI_Service *service,
                                      const Qrl__GetAddressStateReq *input,
                                      Qrl__GetOptimizedAddressStateResp_Closure closure,
                                      void *closure_data);
  void (*get_multi_sig_address_state)(Qrl__PublicAPI_Service *service,
                                      const Qrl__GetMultiSigAddressStateReq *input,
                                      Qrl__GetMultiSigAddressStateResp_Closure closure,
                                      void *closure_data);
  void (*is_slave)(Qrl__PublicAPI_Service *service,
                   const Qrl__IsSlaveReq *input,
                   Qrl__IsSlaveResp_Closure closure,
                   void *closure_data);
  void (*get_object)(Qrl__PublicAPI_Service *service,
                     const Qrl__GetObjectReq *input,
                     Qrl__GetObjectResp_Closure closure,
                     void *closure_data);
  void (*get_latest_data)(Qrl__PublicAPI_Service *service,
                          const Qrl__GetLatestDataReq *input,
                          Qrl__GetLatestDataResp_Closure closure,
                          void *closure_data);
  void (*push_transaction)(Qrl__PublicAPI_Service *service,
                           const Qrl__PushTransactionReq *input,
                           Qrl__PushTransactionResp_Closure closure,
                           void *closure_data);
  void (*transfer_coins)(Qrl__PublicAPI_Service *service,
                         const Qrl__TransferCoinsReq *input,
                         Qrl__TransferCoinsResp_Closure closure,
                         void *closure_data);
  void (*parse_address)(Qrl__PublicAPI_Service *service,
                        const Qrl__ParseAddressReq *input,
                        Qrl__ParseAddressResp_Closure closure,
                        void *closure_data);
  void (*get_chain_stats)(Qrl__PublicAPI_Service *service,
                          const Qrl__GetChainStatsReq *input,
                          Qrl__GetChainStatsResp_Closure closure,
                          void *closure_data);
  void (*get_address_from_pk)(Qrl__PublicAPI_Service *service,
                              const Qrl__GetAddressFromPKReq *input,
                              Qrl__GetAddressFromPKResp_Closure closure,
                              void *closure_data);
  void (*get_multi_sig_create_txn)(Qrl__PublicAPI_Service *service,
                                   const Qrl__MultiSigCreateTxnReq *input,
                                   Qrl__TransferCoinsResp_Closure closure,
                                   void *closure_data);
  void (*get_multi_sig_spend_txn)(Qrl__PublicAPI_Service *service,
                                  const Qrl__MultiSigSpendTxnReq *input,
                                  Qrl__TransferCoinsResp_Closure closure,
                                  void *closure_data);
  void (*get_multi_sig_vote_txn)(Qrl__PublicAPI_Service *service,
                                 const Qrl__MultiSigVoteTxnReq *input,
                                 Qrl__TransferCoinsResp_Closure closure,
                                 void *closure_data);
  void (*get_message_txn)(Qrl__PublicAPI_Service *service,
                          const Qrl__MessageTxnReq *input,
                          Qrl__TransferCoinsResp_Closure closure,
                          void *closure_data);
  void (*get_token_txn)(Qrl__PublicAPI_Service *service,
                        const Qrl__TokenTxnReq *input,
                        Qrl__TransferCoinsResp_Closure closure,
                        void *closure_data);
  void (*get_transfer_token_txn)(Qrl__PublicAPI_Service *service,
                                 const Qrl__TransferTokenTxnReq *input,
                                 Qrl__TransferCoinsResp_Closure closure,
                                 void *closure_data);
  void (*get_slave_txn)(Qrl__PublicAPI_Service *service,
                        const Qrl__SlaveTxnReq *input,
                        Qrl__TransferCoinsResp_Closure closure,
                        void *closure_data);
  void (*get_lattice_txn)(Qrl__PublicAPI_Service *service,
                          const Qrl__LatticeTxnReq *input,
                          Qrl__TransferCoinsResp_Closure closure,
                          void *closure_data);
  void (*get_transaction)(Qrl__PublicAPI_Service *service,
                          const Qrl__GetTransactionReq *input,
                          Qrl__GetTransactionResp_Closure closure,
                          void *closure_data);
  void (*get_mini_transactions_by_address)(Qrl__PublicAPI_Service *service,
                                           const Qrl__GetMiniTransactionsByAddressReq *input,
                                           Qrl__GetMiniTransactionsByAddressResp_Closure closure,
                                           void *closure_data);
  void (*get_transactions_by_address)(Qrl__PublicAPI_Service *service,
                                      const Qrl__GetTransactionsByAddressReq *input,
                                      Qrl__GetTransactionsByAddressResp_Closure closure,
                                      void *closure_data);
  void (*get_tokens_by_address)(Qrl__PublicAPI_Service *service,
                                const Qrl__GetTransactionsByAddressReq *input,
                                Qrl__GetTokensByAddressResp_Closure closure,
                                void *closure_data);
  void (*get_slaves_by_address)(Qrl__PublicAPI_Service *service,
                                const Qrl__GetTransactionsByAddressReq *input,
                                Qrl__GetSlavesByAddressResp_Closure closure,
                                void *closure_data);
  void (*get_lattice_pks_by_address)(Qrl__PublicAPI_Service *service,
                                     const Qrl__GetTransactionsByAddressReq *input,
                                     Qrl__GetLatticePKsByAddressResp_Closure closure,
                                     void *closure_data);
  void (*get_multi_sig_addresses_by_address)(Qrl__PublicAPI_Service *service,
                                             const Qrl__GetTransactionsByAddressReq *input,
                                             Qrl__GetMultiSigAddressesByAddressResp_Closure closure,
                                             void *closure_data);
  void (*get_multi_sig_spend_txs_by_address)(Qrl__PublicAPI_Service *service,
                                             const Qrl__GetMultiSigSpendTxsByAddressReq *input,
                                             Qrl__GetMultiSigSpendTxsByAddressResp_Closure closure,
                                             void *closure_data);
  void (*get_vote_stats)(Qrl__PublicAPI_Service *service,
                         const Qrl__GetVoteStatsReq *input,
                         Qrl__GetVoteStatsResp_Closure closure,
                         void *closure_data);
  void (*get_inbox_messages_by_address)(Qrl__PublicAPI_Service *service,
                                        const Qrl__GetTransactionsByAddressReq *input,
                                        Qrl__GetInboxMessagesByAddressResp_Closure closure,
                                        void *closure_data);
  void (*get_balance)(Qrl__PublicAPI_Service *service,
                      const Qrl__GetBalanceReq *input,
                      Qrl__GetBalanceResp_Closure closure,
                      void *closure_data);
  void (*get_total_balance)(Qrl__PublicAPI_Service *service,
                            const Qrl__GetTotalBalanceReq *input,
                            Qrl__GetTotalBalanceResp_Closure closure,
                            void *closure_data);
  void (*get_ots)(Qrl__PublicAPI_Service *service,
                  const Qrl__GetOTSReq *input,
                  Qrl__GetOTSResp_Closure closure,
                  void *closure_data);
  void (*get_height)(Qrl__PublicAPI_Service *service,
                     const Qrl__GetHeightReq *input,
                     Qrl__GetHeightResp_Closure closure,
                     void *closure_data);
  void (*get_block)(Qrl__PublicAPI_Service *service,
                    const Qrl__GetBlockReq *input,
                    Qrl__GetBlockResp_Closure closure,
                    void *closure_data);
  void (*get_block_by_number)(Qrl__PublicAPI_Service *service,
                              const Qrl__GetBlockByNumberReq *input,
                              Qrl__GetBlockByNumberResp_Closure closure,
                              void *closure_data);
};
typedef void (*Qrl__PublicAPI_ServiceDestroy)(Qrl__PublicAPI_Service *);
void qrl__public_api__init (Qrl__PublicAPI_Service *service,
                            Qrl__PublicAPI_ServiceDestroy destroy);
#define QRL__PUBLIC_API__BASE_INIT \
    { &qrl__public_api__descriptor, protobuf_c_service_invoke_internal, NULL }
#define QRL__PUBLIC_API__INIT(function_prefix__) \
    { QRL__PUBLIC_API__BASE_INIT,\
      function_prefix__ ## get_node_state,\
      function_prefix__ ## get_known_peers,\
      function_prefix__ ## get_peers_stat,\
      function_prefix__ ## get_stats,\
      function_prefix__ ## get_address_state,\
      function_prefix__ ## get_optimized_address_state,\
      function_prefix__ ## get_multi_sig_address_state,\
      function_prefix__ ## is_slave,\
      function_prefix__ ## get_object,\
      function_prefix__ ## get_latest_data,\
      function_prefix__ ## push_transaction,\
      function_prefix__ ## transfer_coins,\
      function_prefix__ ## parse_address,\
      function_prefix__ ## get_chain_stats,\
      function_prefix__ ## get_address_from_pk,\
      function_prefix__ ## get_multi_sig_create_txn,\
      function_prefix__ ## get_multi_sig_spend_txn,\
      function_prefix__ ## get_multi_sig_vote_txn,\
      function_prefix__ ## get_message_txn,\
      function_prefix__ ## get_token_txn,\
      function_prefix__ ## get_transfer_token_txn,\
      function_prefix__ ## get_slave_txn,\
      function_prefix__ ## get_lattice_txn,\
      function_prefix__ ## get_transaction,\
      function_prefix__ ## get_mini_transactions_by_address,\
      function_prefix__ ## get_transactions_by_address,\
      function_prefix__ ## get_tokens_by_address,\
      function_prefix__ ## get_slaves_by_address,\
      function_prefix__ ## get_lattice_pks_by_address,\
      function_prefix__ ## get_multi_sig_addresses_by_address,\
      function_prefix__ ## get_multi_sig_spend_txs_by_address,\
      function_prefix__ ## get_vote_stats,\
      function_prefix__ ## get_inbox_messages_by_address,\
      function_prefix__ ## get_balance,\
      function_prefix__ ## get_total_balance,\
      function_prefix__ ## get_ots,\
      function_prefix__ ## get_height,\
      function_prefix__ ## get_block,\
      function_prefix__ ## get_block_by_number  }
void qrl__public_api__get_node_state(ProtobufCService *service,
                                     const Qrl__GetNodeStateReq *input,
                                     Qrl__GetNodeStateResp_Closure closure,
                                     void *closure_data);
void qrl__public_api__get_known_peers(ProtobufCService *service,
                                      const Qrl__GetKnownPeersReq *input,
                                      Qrl__GetKnownPeersResp_Closure closure,
                                      void *closure_data);
void qrl__public_api__get_peers_stat(ProtobufCService *service,
                                     const Qrl__GetPeersStatReq *input,
                                     Qrl__GetPeersStatResp_Closure closure,
                                     void *closure_data);
void qrl__public_api__get_stats(ProtobufCService *service,
                                const Qrl__GetStatsReq *input,
                                Qrl__GetStatsResp_Closure closure,
                                void *closure_data);
void qrl__public_api__get_address_state(ProtobufCService *service,
                                        const Qrl__GetAddressStateReq *input,
                                        Qrl__GetAddressStateResp_Closure closure,
                                        void *closure_data);
void qrl__public_api__get_optimized_address_state(ProtobufCService *service,
                                                  const Qrl__GetAddressStateReq *input,
                                                  Qrl__GetOptimizedAddressStateResp_Closure closure,
                                                  void *closure_data);
void qrl__public_api__get_multi_sig_address_state(ProtobufCService *service,
                                                  const Qrl__GetMultiSigAddressStateReq *input,
                                                  Qrl__GetMultiSigAddressStateResp_Closure closure,
                                                  void *closure_data);
void qrl__public_api__is_slave(ProtobufCService *service,
                               const Qrl__IsSlaveReq *input,
                               Qrl__IsSlaveResp_Closure closure,
                               void *closure_data);
void qrl__public_api__get_object(ProtobufCService *service,
                                 const Qrl__GetObjectReq *input,
                                 Qrl__GetObjectResp_Closure closure,
                                 void *closure_data);
void qrl__public_api__get_latest_data(ProtobufCService *service,
                                      const Qrl__GetLatestDataReq *input,
                                      Qrl__GetLatestDataResp_Closure closure,
                                      void *closure_data);
void qrl__public_api__push_transaction(ProtobufCService *service,
                                       const Qrl__PushTransactionReq *input,
                                       Qrl__PushTransactionResp_Closure closure,
                                       void *closure_data);
void qrl__public_api__transfer_coins(ProtobufCService *service,
                                     const Qrl__TransferCoinsReq *input,
                                     Qrl__TransferCoinsResp_Closure closure,
                                     void *closure_data);
void qrl__public_api__parse_address(ProtobufCService *service,
                                    const Qrl__ParseAddressReq *input,
                                    Qrl__ParseAddressResp_Closure closure,
                                    void *closure_data);
void qrl__public_api__get_chain_stats(ProtobufCService *service,
                                      const Qrl__GetChainStatsReq *input,
                                      Qrl__GetChainStatsResp_Closure closure,
                                      void *closure_data);
void qrl__public_api__get_address_from_pk(ProtobufCService *service,
                                          const Qrl__GetAddressFromPKReq *input,
                                          Qrl__GetAddressFromPKResp_Closure closure,
                                          void *closure_data);
void qrl__public_api__get_multi_sig_create_txn(ProtobufCService *service,
                                               const Qrl__MultiSigCreateTxnReq *input,
                                               Qrl__TransferCoinsResp_Closure closure,
                                               void *closure_data);
void qrl__public_api__get_multi_sig_spend_txn(ProtobufCService *service,
                                              const Qrl__MultiSigSpendTxnReq *input,
                                              Qrl__TransferCoinsResp_Closure closure,
                                              void *closure_data);
void qrl__public_api__get_multi_sig_vote_txn(ProtobufCService *service,
                                             const Qrl__MultiSigVoteTxnReq *input,
                                             Qrl__TransferCoinsResp_Closure closure,
                                             void *closure_data);
void qrl__public_api__get_message_txn(ProtobufCService *service,
                                      const Qrl__MessageTxnReq *input,
                                      Qrl__TransferCoinsResp_Closure closure,
                                      void *closure_data);
void qrl__public_api__get_token_txn(ProtobufCService *service,
                                    const Qrl__TokenTxnReq *input,
                                    Qrl__TransferCoinsResp_Closure closure,
                                    void *closure_data);
void qrl__public_api__get_transfer_token_txn(ProtobufCService *service,
                                             const Qrl__TransferTokenTxnReq *input,
                                             Qrl__TransferCoinsResp_Closure closure,
                                             void *closure_data);
void qrl__public_api__get_slave_txn(ProtobufCService *service,
                                    const Qrl__SlaveTxnReq *input,
                                    Qrl__TransferCoinsResp_Closure closure,
                                    void *closure_data);
void qrl__public_api__get_lattice_txn(ProtobufCService *service,
                                      const Qrl__LatticeTxnReq *input,
                                      Qrl__TransferCoinsResp_Closure closure,
                                      void *closure_data);
void qrl__public_api__get_transaction(ProtobufCService *service,
                                      const Qrl__GetTransactionReq *input,
                                      Qrl__GetTransactionResp_Closure closure,
                                      void *closure_data);
void qrl__public_api__get_mini_transactions_by_address(ProtobufCService *service,
                                                       const Qrl__GetMiniTransactionsByAddressReq *input,
                                                       Qrl__GetMiniTransactionsByAddressResp_Closure closure,
                                                       void *closure_data);
void qrl__public_api__get_transactions_by_address(ProtobufCService *service,
                                                  const Qrl__GetTransactionsByAddressReq *input,
                                                  Qrl__GetTransactionsByAddressResp_Closure closure,
                                                  void *closure_data);
void qrl__public_api__get_tokens_by_address(ProtobufCService *service,
                                            const Qrl__GetTransactionsByAddressReq *input,
                                            Qrl__GetTokensByAddressResp_Closure closure,
                                            void *closure_data);
void qrl__public_api__get_slaves_by_address(ProtobufCService *service,
                                            const Qrl__GetTransactionsByAddressReq *input,
                                            Qrl__GetSlavesByAddressResp_Closure closure,
                                            void *closure_data);
void qrl__public_api__get_lattice_pks_by_address(ProtobufCService *service,
                                                 const Qrl__GetTransactionsByAddressReq *input,
                                                 Qrl__GetLatticePKsByAddressResp_Closure closure,
                                                 void *closure_data);
void qrl__public_api__get_multi_sig_addresses_by_address(ProtobufCService *service,
                                                         const Qrl__GetTransactionsByAddressReq *input,
                                                         Qrl__GetMultiSigAddressesByAddressResp_Closure closure,
                                                         void *closure_data);
void qrl__public_api__get_multi_sig_spend_txs_by_address(ProtobufCService *service,
                                                         const Qrl__GetMultiSigSpendTxsByAddressReq *input,
                                                         Qrl__GetMultiSigSpendTxsByAddressResp_Closure closure,
                                                         void *closure_data);
void qrl__public_api__get_vote_stats(ProtobufCService *service,
                                     const Qrl__GetVoteStatsReq *input,
                                     Qrl__GetVoteStatsResp_Closure closure,
                                     void *closure_data);
void qrl__public_api__get_inbox_messages_by_address(ProtobufCService *service,
                                                    const Qrl__GetTransactionsByAddressReq *input,
                                                    Qrl__GetInboxMessagesByAddressResp_Closure closure,
                                                    void *closure_data);
void qrl__public_api__get_balance(ProtobufCService *service,
                                  const Qrl__GetBalanceReq *input,
                                  Qrl__GetBalanceResp_Closure closure,
                                  void *closure_data);
void qrl__public_api__get_total_balance(ProtobufCService *service,
                                        const Qrl__GetTotalBalanceReq *input,
                                        Qrl__GetTotalBalanceResp_Closure closure,
                                        void *closure_data);
void qrl__public_api__get_ots(ProtobufCService *service,
                              const Qrl__GetOTSReq *input,
                              Qrl__GetOTSResp_Closure closure,
                              void *closure_data);
void qrl__public_api__get_height(ProtobufCService *service,
                                 const Qrl__GetHeightReq *input,
                                 Qrl__GetHeightResp_Closure closure,
                                 void *closure_data);
void qrl__public_api__get_block(ProtobufCService *service,
                                const Qrl__GetBlockReq *input,
                                Qrl__GetBlockResp_Closure closure,
                                void *closure_data);
void qrl__public_api__get_block_by_number(ProtobufCService *service,
                                          const Qrl__GetBlockByNumberReq *input,
                                          Qrl__GetBlockByNumberResp_Closure closure,
                                          void *closure_data);
typedef struct Qrl__AdminAPI_Service Qrl__AdminAPI_Service;
struct Qrl__AdminAPI_Service
{
  ProtobufCService base;
};
typedef void (*Qrl__AdminAPI_ServiceDestroy)(Qrl__AdminAPI_Service *);
void qrl__admin_api__init (Qrl__AdminAPI_Service *service,
                           Qrl__AdminAPI_ServiceDestroy destroy);
#define QRL__ADMIN_API__BASE_INIT \
    { &qrl__admin_api__descriptor, protobuf_c_service_invoke_internal, NULL }
#define QRL__ADMIN_API__INIT(function_prefix__) \
    { QRL__ADMIN_API__BASE_INIT  }

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor qrl__empty__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_node_state_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_node_state_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_known_peers_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_known_peers_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_peers_stat_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_peers_stat_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_chain_stats_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_chain_stats_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_stats_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_stats_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_address_from_pkreq__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_address_from_pkresp__descriptor;
extern const ProtobufCMessageDescriptor qrl__block_data_point__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_address_state_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_address_state_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_optimized_address_state_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_multi_sig_address_state_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_multi_sig_address_state_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__is_slave_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__is_slave_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__parse_address_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__parse_address_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_object_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_object_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_latest_data_req__descriptor;
extern const ProtobufCEnumDescriptor    qrl__get_latest_data_req__filter__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_latest_data_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__transfer_coins_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__transfer_coins_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__push_transaction_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__push_transaction_resp__descriptor;
extern const ProtobufCEnumDescriptor    qrl__push_transaction_resp__response_code__descriptor;
extern const ProtobufCMessageDescriptor qrl__multi_sig_create_txn_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__multi_sig_spend_txn_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__multi_sig_vote_txn_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__message_txn_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__token_txn_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__transfer_token_txn_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__slave_txn_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__lattice_txn_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__mini_transaction__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_transaction_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_transaction_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_mini_transactions_by_address_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_mini_transactions_by_address_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_transactions_by_address_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_transactions_by_address_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_multi_sig_spend_txs_by_address_req__descriptor;
extern const ProtobufCEnumDescriptor    qrl__get_multi_sig_spend_txs_by_address_req__filter_type__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_multi_sig_spend_txs_by_address_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_vote_stats_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_vote_stats_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_inbox_messages_by_address_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__inbox_message__descriptor;
extern const ProtobufCMessageDescriptor qrl__token_detail__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_tokens_by_address_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__slave_detail__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_slaves_by_address_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__lattice_pks_detail__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_lattice_pks_by_address_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__multi_sig_detail__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_multi_sig_addresses_by_address_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_balance_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_balance_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_total_balance_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_total_balance_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_otsreq__descriptor;
extern const ProtobufCMessageDescriptor qrl__otsbitfield_by_page__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_otsresp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_height_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_height_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_block_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_block_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_block_by_number_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_block_by_number_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_local_addresses_req__descriptor;
extern const ProtobufCMessageDescriptor qrl__get_local_addresses_resp__descriptor;
extern const ProtobufCMessageDescriptor qrl__node_info__descriptor;
extern const ProtobufCEnumDescriptor    qrl__node_info__state__descriptor;
extern const ProtobufCMessageDescriptor qrl__address_descriptor__descriptor;
extern const ProtobufCMessageDescriptor qrl__stored_peers__descriptor;
extern const ProtobufCMessageDescriptor qrl__peer__descriptor;
extern const ProtobufCMessageDescriptor qrl__address_state__descriptor;
extern const ProtobufCMessageDescriptor qrl__address_state__tokens_entry__descriptor;
extern const ProtobufCMessageDescriptor qrl__address_state__slave_pks_access_type_entry__descriptor;
extern const ProtobufCMessageDescriptor qrl__optimized_address_state__descriptor;
extern const ProtobufCMessageDescriptor qrl__multi_sig_address_state__descriptor;
extern const ProtobufCMessageDescriptor qrl__multi_sig_addresses_list__descriptor;
extern const ProtobufCMessageDescriptor qrl__data_list__descriptor;
extern const ProtobufCMessageDescriptor qrl__bitfield__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction_hash_list__descriptor;
extern const ProtobufCMessageDescriptor qrl__lattice_pk__descriptor;
extern const ProtobufCMessageDescriptor qrl__address_amount__descriptor;
extern const ProtobufCMessageDescriptor qrl__block_header__descriptor;
extern const ProtobufCMessageDescriptor qrl__block_header_extended__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction_count__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction_count__count_entry__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction_extended__descriptor;
extern const ProtobufCMessageDescriptor qrl__block_extended__descriptor;
extern const ProtobufCMessageDescriptor qrl__block__descriptor;
extern const ProtobufCMessageDescriptor qrl__genesis_balance__descriptor;
extern const ProtobufCMessageDescriptor qrl__block_meta_data_list__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__transfer__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__coin_base__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__lattice_public_key__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__message__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__token__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__transfer_token__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__slave__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__multi_sig_create__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__multi_sig_spend__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__multi_sig_vote__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__proposal_create__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__proposal_create__qip__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__proposal_create__config__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__proposal_create__other__descriptor;
extern const ProtobufCMessageDescriptor qrl__transaction__proposal_vote__descriptor;
extern const ProtobufCMessageDescriptor qrl__vote_stats__descriptor;
extern const ProtobufCMessageDescriptor qrl__proposal_vote_stats__descriptor;
extern const ProtobufCMessageDescriptor qrl__proposal_record__descriptor;
extern const ProtobufCMessageDescriptor qrl__token_list__descriptor;
extern const ProtobufCMessageDescriptor qrl__token_balance__descriptor;
extern const ProtobufCMessageDescriptor qrl__slave_metadata__descriptor;
extern const ProtobufCMessageDescriptor qrl__lattice_pkmetadata__descriptor;
extern const ProtobufCMessageDescriptor qrl__token_metadata__descriptor;
extern const ProtobufCMessageDescriptor qrl__encrypted_ephemeral_message__descriptor;
extern const ProtobufCMessageDescriptor qrl__encrypted_ephemeral_message__channel__descriptor;
extern const ProtobufCMessageDescriptor qrl__address_list__descriptor;
extern const ProtobufCMessageDescriptor qrl__block_height_data__descriptor;
extern const ProtobufCMessageDescriptor qrl__block_meta_data__descriptor;
extern const ProtobufCMessageDescriptor qrl__block_number_mapping__descriptor;
extern const ProtobufCMessageDescriptor qrl__peer_stat__descriptor;
extern const ProtobufCMessageDescriptor qrl__node_chain_state__descriptor;
extern const ProtobufCMessageDescriptor qrl__node_header_hash__descriptor;
extern const ProtobufCMessageDescriptor qrl__p2_packnowledgement__descriptor;
extern const ProtobufCMessageDescriptor qrl__peer_info__descriptor;
extern const ProtobufCMessageDescriptor qrl__peers__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__chain__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__block__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__block__block_size_controller__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__transaction__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__transaction__message__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__transaction__slave__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__transaction__token__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__transaction__lattice__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__transaction__foundation_multi_sig__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__transaction__proposal__descriptor;
extern const ProtobufCMessageDescriptor qrl__dev_config__pow__descriptor;
extern const ProtobufCServiceDescriptor qrl__public_api__descriptor;
extern const ProtobufCServiceDescriptor qrl__admin_api__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_qrl_2eproto__INCLUDED */
